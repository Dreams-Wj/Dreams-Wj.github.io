<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数独生成以及解数独</title>
    <url>/2020/03/03/%E6%95%B0%E7%8B%AC%E7%94%9F%E6%88%90%E4%BB%A5%E5%8F%8A%E8%A7%A3%E6%95%B0%E7%8B%AC/</url>
    <content><![CDATA[<h3 id="数独"><a href="#数独" class="headerlink" title="数独"></a>数独</h3><p>昨天给数独游戏这题出个数据，看了看网上代码有点少，所以就自己操作了一下(可能有地方操作不到位，望见谅！代码功底不是很好！<br>废话不多上那就直接上代码了！</p>
<h3 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h3><ul>
<li>代码有些地方都加了注释，生成速度还是蛮快的，</li>
<li>原本rand的想使用C++的mt19937，可是不太会用</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> mp[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//检查函数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">char</span> k)</span></span>&#123;</span><br><span class="line">    <span class="comment">//检查行</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">9</span> ; i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mp[x][i] == k)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检查列</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">9</span> ; i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mp[i][y] == k)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检查九宫格</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = x / <span class="number">3</span> * <span class="number">3</span> ; i &lt; x / <span class="number">3</span> * <span class="number">3</span> + <span class="number">3</span> ; i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = y / <span class="number">3</span> * <span class="number">3</span> ; j &lt; y / <span class="number">3</span> * <span class="number">3</span> + <span class="number">3</span> ; j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mp[i][j] == k)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//搜索函数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">9</span> ; i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; <span class="number">9</span> ; j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mp[i][j] != <span class="string">'?'</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">char</span> k = <span class="string">'1'</span> ; k &lt;= <span class="string">'9'</span> ; k ++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(check(i,j,k))&#123;</span><br><span class="line">                        mp[i][j] = k;</span><br><span class="line">                        <span class="keyword">if</span>(dfs())</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            mp[i][j] = <span class="string">'?'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cShuDu</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">bool</span> vis[MAXN][MAXN][MAXN]&#123;&#125;;     <span class="comment">// 标记每个3x3里出现了哪些数字</span></span><br><span class="line">    <span class="keyword">bool</span> vis_x[MAXN][MAXN]&#123;&#125;;         <span class="comment">// 标记行里出现了哪些数字</span></span><br><span class="line">    <span class="keyword">bool</span> vis_y[MAXN][MAXN]&#123;&#125;;         <span class="comment">// 标记列里出现了哪些数字</span></span><br><span class="line">    <span class="keyword">char</span> cmap[MAXN * MAXN]&#123;&#125;;           <span class="comment">// 地图</span></span><br><span class="line">    <span class="keyword">int</span> num&#123;&#125;;                        <span class="comment">// 需要生成的个数</span></span><br><span class="line">    <span class="keyword">int</span> sum[MAXN]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; randVe;             <span class="comment">// 随机1-9 顺序打乱</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt; mapVe;        <span class="comment">// 存放地图</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">randNum9</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">222</span>; i++)&#123;</span><br><span class="line">		    <span class="keyword">int</span> l = rand() % <span class="number">9</span>, r = rand() % <span class="number">9</span>; </span><br><span class="line"><span class="comment">//            cout &lt;&lt; l &lt;&lt; " " &lt;&lt; r &lt;&lt; endl;</span></span><br><span class="line">            swap(randVe[l], randVe[r]);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        cout &lt;&lt; "-------------------------------" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//        for(auto i : randVe) &#123;</span></span><br><span class="line"><span class="comment">//            cout &lt;&lt; i &lt;&lt; " ";</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//        cout &lt;&lt; "-------------------------------" &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> now)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">81</span>; i++)&#123;</span><br><span class="line">            mapVe[now].push_back(cmap[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> xx, <span class="keyword">int</span> yy, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !(vis[(xx + <span class="number">2</span>) / <span class="number">3</span>][(yy + <span class="number">2</span>) / <span class="number">3</span>][val] || vis_x[xx][val] || vis_y[yy][val] || sum[val] &gt;= <span class="number">9</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(now == <span class="number">82</span>) &#123;</span><br><span class="line">            num--;</span><br><span class="line">            print(cnt - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        randNum9();                 <span class="comment">//打乱1-9</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> j : randVe) &#123;</span><br><span class="line">            <span class="keyword">int</span> xx = (now + <span class="number">8</span>) / <span class="number">9</span>;</span><br><span class="line">            <span class="keyword">int</span> yy = (now - <span class="number">1</span>) % <span class="number">9</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(xx, yy, j)) &#123;</span><br><span class="line">                vis[(xx + <span class="number">2</span>) / <span class="number">3</span>][(yy + <span class="number">2</span>) / <span class="number">3</span>][j] = vis_x[xx][j] = vis_y[yy][j] = <span class="literal">true</span>;</span><br><span class="line">                cmap[now] = <span class="keyword">char</span> (<span class="string">'0'</span> + j);</span><br><span class="line">                sum[j]++;</span><br><span class="line">                dfs(now + <span class="number">1</span>, cnt);</span><br><span class="line">                <span class="keyword">if</span>(num == <span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">                sum[j]--;</span><br><span class="line">                vis[(xx + <span class="number">2</span>) / <span class="number">3</span>][(yy + <span class="number">2</span>) / <span class="number">3</span>][j] = vis_x[xx][j] = vis_y[yy][j] = <span class="literal">false</span>;</span><br><span class="line">                cmap[now] = <span class="string">'\0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">memset</span>(vis_x, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis_x));</span><br><span class="line">        <span class="built_in">memset</span>(vis_y, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis_y));</span><br><span class="line">        <span class="built_in">memset</span>(cmap, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(cmap));</span><br><span class="line">        <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</span><br><span class="line">        randVe.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) randVe.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt; <span class="title">getShuDu</span><span class="params">(<span class="keyword">int</span> _num)</span> </span>&#123;</span><br><span class="line">        mapVe.clear();</span><br><span class="line">        mapVe.resize(_num + <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _num; i++)&#123;</span><br><span class="line">            init();</span><br><span class="line">            num = <span class="number">1</span>;</span><br><span class="line">            dfs(<span class="number">1</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mapVe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//    ifstream fileIn;</span></span><br><span class="line">    ofstream fileIn, fileOut;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> num = rand() % <span class="number">6666</span> + <span class="number">5555</span>;</span><br><span class="line"><span class="comment">//		int num = 1;</span></span><br><span class="line">        cShuDu tmp;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt; ve = tmp.getShuDu(num);</span><br><span class="line">        <span class="comment">// 输出 in</span></span><br><span class="line">        fileIn.open(<span class="string">"data"</span> + to_string(i) + <span class="string">".in"</span>, ios::out);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num; j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"*********************"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">int</span> maxn = <span class="number">80</span>; 			<span class="comment">// 最大问号数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;t : ve[j]) &#123;</span><br><span class="line">                now++;</span><br><span class="line">                <span class="keyword">if</span>(now % <span class="number">9</span> != <span class="number">1</span>) &#123;</span><br><span class="line">                    fileIn &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>((rand() + now) % <span class="number">5</span> == <span class="number">0</span> &amp;&amp; maxn &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    t = <span class="string">'?'</span>;</span><br><span class="line">                    maxn--;</span><br><span class="line">                &#125;</span><br><span class="line">                fileIn &lt;&lt; t;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; t;</span><br><span class="line">                <span class="keyword">if</span>(now % <span class="number">9</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    fileIn &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"*********************"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fileIn.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出out</span></span><br><span class="line">        fileOut.open(<span class="string">"data"</span> + to_string(i) + <span class="string">".out"</span>, ios::out);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"*********************"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> t : ve[j]) &#123;</span><br><span class="line">                now++;</span><br><span class="line">                mp[(now - <span class="number">1</span>) / <span class="number">9</span>][(now - <span class="number">1</span>) % <span class="number">9</span>] = t;</span><br><span class="line">            &#125;</span><br><span class="line">            dfs();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">9</span>; x++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">9</span>; y++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(y != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">                        fileOut &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    fileOut &lt;&lt; mp[x][y];</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; mp[x][y];</span><br><span class="line">                &#125;</span><br><span class="line">                fileOut &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"*********************"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">if</span>(j != num - <span class="number">1</span>) &#123;</span><br><span class="line">                fileOut &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fileOut.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HUSTOJ的spj"><a href="#HUSTOJ的spj" class="headerlink" title="HUSTOJ的spj"></a>HUSTOJ的spj</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> user_map[<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line"><span class="keyword">char</span> oj_map[<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line"><span class="keyword">bool</span> xx[<span class="number">25</span>][<span class="number">25</span>], yy[<span class="number">25</span>][<span class="number">25</span>], vis[<span class="number">25</span>][<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    FILE * f_in=fopen(argv[<span class="number">1</span>],<span class="string">"r"</span>);<span class="comment">//测试输入</span></span><br><span class="line">    FILE * f_out=fopen(argv[<span class="number">2</span>],<span class="string">"r"</span>);<span class="comment">//测试输出</span></span><br><span class="line">    FILE * f_user=fopen(argv[<span class="number">3</span>],<span class="string">"r"</span>);<span class="comment">//用户输出</span></span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>; <span class="comment">//AC=0,WA=1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*****spj代码区域*******/</span></span><br><span class="line">    <span class="keyword">while</span>(fgets(oj_map[<span class="number">1</span>], <span class="number">25</span>, f_in) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(xx, <span class="literal">false</span>, <span class="keyword">sizeof</span>(xx));</span><br><span class="line">        <span class="built_in">memset</span>(yy, <span class="literal">false</span>, <span class="keyword">sizeof</span>(yy));</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis)); </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">            fgets(oj_map[i], <span class="number">25</span>, f_in);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line">            fgets(user_map[i], <span class="number">25</span>, f_user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">18</span>; j += <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = (j + <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(oj_map[i][j] == <span class="string">'?'</span>) &#123;</span><br><span class="line">                    ;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(oj_map[i][j] != user_map[i][j])&#123;</span><br><span class="line">                        ret = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(vis[(i + <span class="number">2</span>) / <span class="number">3</span>][(tmp + <span class="number">2</span>) / <span class="number">3</span>][user_map[i][j] - <span class="string">'0'</span>] || xx[i][user_map[i][j] - <span class="string">'0'</span>] || yy[tmp][user_map[i][j] - <span class="string">'0'</span>])&#123;</span><br><span class="line">                    ret = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                vis[(i + <span class="number">2</span>) / <span class="number">3</span>][(tmp + <span class="number">2</span>) / <span class="number">3</span>][user_map[i][j] - <span class="string">'0'</span>] = xx[i][user_map[i][j] - <span class="string">'0'</span>] = yy[tmp][user_map[i][j] - <span class="string">'0'</span>] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*****spj-end********/</span> </span><br><span class="line"></span><br><span class="line">    fclose(f_in);</span><br><span class="line">    fclose(f_out);</span><br><span class="line">    fclose(f_user);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>HUSTOJ</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>HUSTOJ</tag>
        <tag>数独</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU-5701中位数计数</title>
    <url>/2020/03/03/HDU-5701%E4%B8%AD%E4%BD%8D%E6%95%B0%E8%AE%A1%E6%95%B0/</url>
    <content><![CDATA[<h3 id="题目链接-http-acm-hdu-edu-cn-showproblem-php-pid-5701"><a href="#题目链接-http-acm-hdu-edu-cn-showproblem-php-pid-5701" class="headerlink" title="题目链接: http://acm.hdu.edu.cn/showproblem.php?pid=5701"></a>题目链接: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5701" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=5701</a></h3><p><img src="https://img-blog.csdnimg.cn/2020030312474495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>一道思路题，自己思路不够啊(QAQ……<br>中位数: 所有值从小到大排序后排在正中间的那个数，如果值有偶数个，通常取最中间的两个数值的平均数作为中位数。 （这题不用去判断偶数! 所以只需让这个数右边比他大的个数等于左边比他小的个数即可！<br>所以，我们只需先扫一边右边，求别当前数大的数的个数与比其小的数的个数差，反过来，左边也求一边，当左边的值等于右边，则ans加上等于该值的个数！(当然先左边再右边也行！<br><img src="https://img-blog.csdnimg.cn/2020030312532128.png" alt="在这里插入图片描述"></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">8005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> mp[MAXN * <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ve;</span><br><span class="line">        ve.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> k;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">            ve.push_back(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            <span class="built_in">memset</span>(mp, <span class="number">0</span>, <span class="keyword">sizeof</span>(mp));</span><br><span class="line">            <span class="keyword">int</span> now = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">            mp[MAXN + now]++;       <span class="comment">// 本身算一个</span></span><br><span class="line">            <span class="comment">// 右边</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">                now += (ve[j] &lt; ve[i]) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">                mp[now + MAXN]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 左边</span></span><br><span class="line">            now = <span class="number">0</span>;</span><br><span class="line">            ans += mp[MAXN + now];      <span class="comment">// 加上本身和右区间可行个答案</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                now += (ve[j] &gt; ve[i]) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">                ans += mp[now + MAXN];       <span class="comment">// 左右两边持平</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HDU</category>
      </categories>
      <tags>
        <tag>HDU</tag>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU-6676度度熊与运算式1</title>
    <url>/2020/03/02/HDU-6676%E5%BA%A6%E5%BA%A6%E7%86%8A%E4%B8%8E%E8%BF%90%E7%AE%97%E5%BC%8F1/</url>
    <content><![CDATA[<h3 id="题目链接-http-acm-hdu-edu-cn-showproblem-php-pid-6676"><a href="#题目链接-http-acm-hdu-edu-cn-showproblem-php-pid-6676" class="headerlink" title="题目链接: http://acm.hdu.edu.cn/showproblem.php?pid=6676"></a>题目链接: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=6676" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6676</a></h3><p><img src="https://img-blog.csdnimg.cn/20200302020321110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>训练赛的时候，一直WA，没找到问题所在，就结束了，错误的地方在于，最后还剩多少个1用来异或，算的写法写错了，应该用(1的总数-最后的最大值) 来算，而我直接用变量来统计了！！<br>题解就直接引用官方的了：<br><img src="https://img-blog.csdnimg.cn/20200302020805542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            <span class="built_in">string</span> s;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">            s += <span class="string">"#"</span>;</span><br><span class="line">            <span class="keyword">int</span> len = s.length();</span><br><span class="line">            <span class="keyword">int</span> b, sum;</span><br><span class="line">            b = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ve;</span><br><span class="line">            ve.clear();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i] == <span class="string">'?'</span>) &#123;</span><br><span class="line">                    b++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'^'</span> || s[i] == <span class="string">'#'</span>) &#123;</span><br><span class="line">                    ve.push_back(b + <span class="number">1</span>);</span><br><span class="line">                    b = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> i : ve) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">21</span>; j &gt;= <span class="number">1</span>; j--) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(sum &amp; (<span class="number">1</span> &lt;&lt; j) || i &lt; (<span class="number">1</span> &lt;&lt; j)) <span class="keyword">continue</span>;</span><br><span class="line">                    i -= (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">                    sum ^= (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>((len - sum) % <span class="number">2</span>) sum ^= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HDU</category>
        <category>02.29个人赛(二)</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>HDU</tag>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU-1557权力指数</title>
    <url>/2020/03/02/HDU-1557%E6%9D%83%E5%8A%9B%E6%8C%87%E6%95%B0/</url>
    <content><![CDATA[<h3 id="题目链接-http-acm-hdu-edu-cn-showproblem-php-pid-1557"><a href="#题目链接-http-acm-hdu-edu-cn-showproblem-php-pid-1557" class="headerlink" title="题目链接: http://acm.hdu.edu.cn/showproblem.php?pid=1557"></a>题目链接: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1557" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1557</a></h3><p><img src="https://img-blog.csdnimg.cn/20200302005501781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这题，可以想到用搜索，或者枚举(QAQ，训练的时候竟然没搜明白，可能，没睡醒！！<br>题目数据 n &lt;= 20, 数据小直接上搜索，也可以用枚举，二进制枚举！<br>真的得吐槽自己，真的越来越菜了……</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul>
<li>DFS</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">int</span> num[MAXN];</span><br><span class="line"><span class="keyword">int</span> n, t, ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cnt, <span class="keyword">int</span> now, <span class="keyword">int</span>&amp; v, <span class="keyword">int</span>&amp; sum)</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt &gt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(now &gt; sum &amp;&amp; now - num[v] &lt;= sum) &#123;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(cnt + <span class="number">1</span>, now, v, sum);      <span class="comment">// 是否选当前的小团体</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(cnt != v) dfs(cnt + <span class="number">1</span>, now + num[cnt], v, sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">            sum += num[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sum /= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            ans = <span class="number">0</span>;</span><br><span class="line">            dfs(<span class="number">1</span>, num[i], i, sum);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>二进制枚举  请看大佬博客: <ul>
<li><a href="https://www.cnblogs.com/shawn-ji/p/4696658.html" target="_blank" rel="noopener">https://www.cnblogs.com/shawn-ji/p/4696658.html</a></li>
<li><a href="https://blog.csdn.net/folieshell/article/details/47154435" target="_blank" rel="noopener">https://blog.csdn.net/folieshell/article/details/47154435</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>HDU</category>
        <category>02.27个人赛(一)</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>HDU</tag>
        <tag>二进制枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU-6290奢侈的旅行</title>
    <url>/2020/03/01/HDU-6290%E5%A5%A2%E4%BE%88%E7%9A%84%E6%97%85%E8%A1%8C/</url>
    <content><![CDATA[<h3 id="题目链接：http-acm-hdu-edu-cn-showproblem-php-pid-6290"><a href="#题目链接：http-acm-hdu-edu-cn-showproblem-php-pid-6290" class="headerlink" title="题目链接：http://acm.hdu.edu.cn/showproblem.php?pid=6290"></a>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6290" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6290</a></h3><p><img src="https://img-blog.csdnimg.cn/20200301155358755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>昨天个人赛里的，题目，普通Dijstra直接内存炸了….<br>以前没写过，堆优化的Dijstra，所以学习了一下大佬的写法！！<br>博客: <a href="https://www.cnblogs.com/luoxiaoyi/p/9726829.html" target="_blank" rel="noopener">https://www.cnblogs.com/luoxiaoyi/p/9726829.html</a><br>题解思路我就直接引用这位大佬的了！！<br><img src="https://img-blog.csdnimg.cn/20200301155736611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>题解讲的很明白，接下来就是操作了！！</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF = <span class="number">1e16</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    node(<span class="keyword">int</span> _to, <span class="keyword">int</span> _a, <span class="keyword">int</span> _b) : to(_to), a(_a), b(_b) &#123;&#125;</span><br><span class="line">&#125;Edge;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lzy</span> &#123;</span>        <span class="comment">// 实在不晓得取啥名，来个lzy</span></span><br><span class="line">    <span class="keyword">int</span> from;</span><br><span class="line">    ll level;</span><br><span class="line">    lzy(<span class="keyword">int</span> _from = <span class="number">0</span>, ll _level = <span class="number">0</span>) : from(_from), level(_level) &#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> lzy &amp;a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> level &gt; a.level;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Edge&gt; &gt; E;</span><br><span class="line">ll dist[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijstra</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    fill(vis, vis + n + <span class="number">5</span>, <span class="literal">false</span>);</span><br><span class="line">    fill(dist, dist + n + <span class="number">5</span>, INF);</span><br><span class="line">    dist[start] = <span class="number">1</span>;</span><br><span class="line">    priority_queue&lt;lzy&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">    q.push(lzy&#123;start, <span class="number">1</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        lzy tmp = q.top();  <span class="comment">// 取出中转点</span></span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">int</span> u = tmp.from;</span><br><span class="line">        <span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i : E[u]) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = i.to;</span><br><span class="line">            <span class="keyword">int</span> a = i.a;</span><br><span class="line">            <span class="keyword">int</span> b = i.b;</span><br><span class="line">            <span class="keyword">if</span>(log2((dist[u] + a * <span class="number">1.0</span>) / dist[u]) &lt; b) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!vis[v] &amp;&amp; dist[v] &gt; dist[u] + a) &#123;      <span class="comment">// 如果中转点已经现过或者不满足条件</span></span><br><span class="line">                dist[v] = dist[u] + a;                  <span class="comment">// 取最小的level</span></span><br><span class="line">                q.push(lzy&#123;v, dist[v]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        E.clear();</span><br><span class="line">        E.resize(n + <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> a, b, c, d;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">            E[a].push_back(Edge&#123;b, c, d&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Dijstra(<span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(dist[n] == INF)          <span class="comment">// 如果无法到达</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>)(log2(dist[n])) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HDU</category>
        <category>02.29个人赛(二)</category>
      </categories>
      <tags>
        <tag>HDU</tag>
        <tag>Dijstra</tag>
        <tag>Dijstra堆优化</tag>
        <tag>最短路径</tag>
      </tags>
  </entry>
  <entry>
    <title>ZJYYCOJ-好基友</title>
    <url>/2020/02/26/ZJYYCOJ-%E5%A5%BD%E5%9F%BA%E5%8F%8B/</url>
    <content><![CDATA[<h3 id="题目链接-http-acm-oinsm-com-problem-php-cid-1022-amp-pid-4"><a href="#题目链接-http-acm-oinsm-com-problem-php-cid-1022-amp-pid-4" class="headerlink" title="题目链接: http://acm.oinsm.com/problem.php?cid=1022&amp;pid=4"></a>题目链接: <a href="http://acm.oinsm.com/problem.php?cid=1022&pid=4" target="_blank" rel="noopener">http://acm.oinsm.com/problem.php?cid=1022&amp;pid=4</a></h3><p><img src="https://img-blog.csdnimg.cn/20200226162952425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>偷懒，我就直接 引用官方题解了<br>解题思路:该题解题思路有多种,并查集以及贪心皆可以 AC。 </p>
<p>（1）贪心思路：<br>根据我们的假设，可以制定按顺序让每张沙发上基友开心的策略。<br>对于每张沙发，找到沙发上第一个人的基友，如果不在同一个沙发<br>上，就把沙发上的第二人换成第一个人的基友。 </p>
<p>如果一个人的编号为 x，那么他的基友的编号为 x ^ 1， ^ 在这里<br>是异或操作。对于每张沙发上的第一个人 x = row[i]，找到他们的<br>同伴所在的位置 row[j]，将 row[j] 和 row[i + 1] 互相交换。 </p>
<p>（2）并查集思路：<br>我们设想一下加入有两对基友互相坐错了位置，我们至多只需要换<br>一次。<br>如果三对基友相互坐错了位置，A1+B2,B1+C2,C1+A2。他们三个之<br>间形成了一个环，我们只需要交换两次。<br>如果四队基友相互坐错了位置，即这四对基友不与其他基友坐在一<br>起，A1+B2,B1+C2,C1+D2,D1+A2.他们四个之间形成了一个环，他们<br>只需要交换三次并且不用和其他基友交换，就可以将这四对基友交<br>换好，<br>以此类推，其实就是假设 k 对基友形成一个环状的错误链，我们只<br>需要交换 k - 1 次就可以将这 k 对基友的位置排好。<br>所以问题转化成 N 对基友中，有几个这样的错误环。<br>我们可以使用并查集来处理，每次遍历相邻的两个位置，如果他们<br>本来就是基友，他们处于大小为 1 的错误环中，只需要交换 0 次。<br>如果不是基友，说明他们呢两对处在同一个错误环中，我们将他们<br>合并（union），将所有的错坐基友合并和后，答案就是基友对 -<br>环个数。<br>这也说明，最差的情况就是所有 N 对基友都在一个环中，这时候我<br>们需要 N - 1 调换。<br>最好情况每对基友已经坐好了，已经有 N 个大小为 1 的环，这时候<br>我们需要 N - N 次调换。 </p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul>
<li>贪心</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> num[MAXN];</span><br><span class="line"><span class="keyword">int</span> vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">            vis[num[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i += <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((num[i] ^ num[i + <span class="number">1</span>]) != <span class="number">1</span>) &#123;</span><br><span class="line">                sum++;</span><br><span class="line"><span class="comment">//                cout &lt;&lt; num[i] &lt;&lt; " " &lt;&lt; num[i + 1] &lt;&lt; endl;</span></span><br><span class="line">                <span class="keyword">int</span> tmp = num[i + <span class="number">1</span>];</span><br><span class="line">                swap(num[i + <span class="number">1</span>], num[vis[num[i] ^ <span class="number">1</span>]]);</span><br><span class="line">                vis[tmp] = vis[num[i] ^ <span class="number">1</span>];</span><br><span class="line">                vis[num[i] ^ <span class="number">1</span>] = i + <span class="number">1</span>;</span><br><span class="line"><span class="comment">//                cout &lt;&lt; num[i] &lt;&lt; " " &lt;&lt; num[i + 1] &lt;&lt; endl;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>并查集</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> num[MAXN];</span><br><span class="line"><span class="keyword">int</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> ans[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findx</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = x, tmp;</span><br><span class="line">    <span class="keyword">while</span>(r != vis[r]) &#123;</span><br><span class="line">        r = vis[r];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k = x;</span><br><span class="line">    <span class="keyword">while</span>(k != vis[k]) &#123;</span><br><span class="line">        tmp = vis[k];</span><br><span class="line">        vis[k] = r;</span><br><span class="line">        k = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">marge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx = findx(x);</span><br><span class="line">    <span class="keyword">int</span> fy = findx(y);</span><br><span class="line">    <span class="keyword">if</span>(fx != fy) &#123;</span><br><span class="line">        vis[fx] = fy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span> * n; i++)&#123;</span><br><span class="line">            vis[i] = i;</span><br><span class="line">            ans[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i += <span class="number">2</span>)&#123;</span><br><span class="line">            marge(i - <span class="number">1</span>, i);</span><br><span class="line">            <span class="keyword">if</span>((num[i] ^ num[i + <span class="number">1</span>]) != <span class="number">1</span>) &#123;</span><br><span class="line">                marge(num[i], num[i + <span class="number">1</span>]);</span><br><span class="line"><span class="comment">//                marge(num[i], num[i] ^ 1);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n; i++)&#123;</span><br><span class="line">            ans[findx(i)]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n; i++)&#123;</span><br><span class="line"><span class="comment">//             cout &lt;&lt; i &lt;&lt; " : " &lt;&lt; ans[i] &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">if</span>(ans[i] &gt; <span class="number">1</span>) sum++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n - sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ZJYYCOJ</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>ZJYYCOJ-最多水容量</title>
    <url>/2020/02/26/ZJYYCOJ-%E6%9C%80%E5%A4%9A%E6%B0%B4%E5%AE%B9%E9%87%8F/</url>
    <content><![CDATA[<h3 id="题目链接-http-acm-oinsm-com-problem-php-cid-1022-amp-pid-4"><a href="#题目链接-http-acm-oinsm-com-problem-php-cid-1022-amp-pid-4" class="headerlink" title="题目链接: http://acm.oinsm.com/problem.php?cid=1022&amp;pid=4"></a>题目链接: <a href="http://acm.oinsm.com/problem.php?cid=1022&pid=4" target="_blank" rel="noopener">http://acm.oinsm.com/problem.php?cid=1022&amp;pid=4</a></h3><p><img src="https://img-blog.csdnimg.cn/20200226141101993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>这题，一开始，我一想，来个单调栈不就好了嘛，冲冲冲！wa了，那我就正的一遍，反的一遍，冲冲冲，emmmm，又wa了！<br>(我就直接引用官方题解了，哈哈)<br>双指针法 </p>
<p>这种方法背后的思路在于，两线段之间形成的区域总是会受到其中<br>较短那条长度的限制。此外，两线段距离越远，得到的面积就越<br>大。 </p>
<p>我们在由线段长度构成的数组中使用两个指针，一个放在开始，一<br>个置于末尾。 此外，我们会使用变量 maxarea 来持续存储到目前<br>为止所获得的最大面积。 在每一步中，我们会找出指针所指向的两<br>条线段形成的区域，更新 maxarea，并将指向较短线段的指针向较<br>长线段那端移动一步。 </p>
<p>查看下面的例子将有助于你更好地理解该算法： </p>
<p>1 8 6 2 5 4 8 3 7<br><img src="https://img-blog.csdnimg.cn/20200226141739256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200226141756618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200226141813427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020022614182542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>总的来说，有两种情况可以得到较大的面积</p>
<ol>
<li>两块板较高</li>
<li>两块板的间隔距离教远</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">20005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> num[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">        <span class="keyword">int</span> maxn = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">while</span>(num[l] == <span class="number">0</span>) l++;</span><br><span class="line">            <span class="keyword">while</span>(num[r] == <span class="number">0</span>) r--;</span><br><span class="line">            <span class="keyword">if</span>(r &lt;= <span class="number">0</span> || l &gt; n) <span class="keyword">break</span>;</span><br><span class="line">            maxn = max(maxn, min(num[l], num[r]) * <span class="built_in">abs</span>(r - l));</span><br><span class="line">            <span class="keyword">if</span>(num[l] &lt;= num[r]) &#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; maxn &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ZJYYCOJ</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>ZJYYCOJ-水流问题</title>
    <url>/2020/02/26/ZJYYCOJ-%E6%B0%B4%E6%B5%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="题目链接-http-acm-oinsm-com-problem-php-cid-1022-amp-pid-9"><a href="#题目链接-http-acm-oinsm-com-problem-php-cid-1022-amp-pid-9" class="headerlink" title="题目链接: http://acm.oinsm.com/problem.php?cid=1022&amp;pid=9"></a>题目链接: <a href="http://acm.oinsm.com/problem.php?cid=1022&pid=9" target="_blank" rel="noopener">http://acm.oinsm.com/problem.php?cid=1022&amp;pid=9</a></h3><p><img src="https://img-blog.csdnimg.cn/20200226132917326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h3><p>题目读完，可能还是会有点朦朦的，题目意思就是，随意从一个点出发，问你是否能走到太平洋(即x == 1 || y == 1) 和 大西洋(即x == n || y == m), 然后看看数据范围，哦，可以搜！！( 或者是有别的解法！当然DFS，BFS 都是可以的！<br>搜法: 俗称逆向思维，既然要到太平洋，大西洋，那我们就从边界出发，往里搜，从太平洋过来的，我们标记为1，大西洋过来的标记为2，最后遍历一遍标记，就可以得到答案了！</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul>
<li><p>DFS </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">155</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> mp[MAXN][MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN][MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; m || vis[x][y][v - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> xx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> yy = y + dir[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(check(xx, yy, v) &amp;&amp; mp[x][y] &lt;= mp[xx][yy])&#123;</span><br><span class="line">            vis[xx][yy][v - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">            dfs(xx, yy, v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; mp[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">            vis[<span class="number">1</span>][i][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">            dfs(<span class="number">1</span>, i, <span class="number">1</span>);</span><br><span class="line">            vis[n][i][<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">            dfs(n, i, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            vis[i][<span class="number">1</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">            dfs(i, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            vis[i][m][<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">            dfs(i, m, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(vis[i][j][<span class="number">0</span>] &amp;&amp; vis[i][j][<span class="number">1</span>])&#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>BFS</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">155</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> mp[MAXN][MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN][MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; m || vis[x][y][v - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    q.push(node&#123;x, y&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        node tmp = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> xx = tmp.x + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> yy = tmp.y + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(check(xx, yy, v) &amp;&amp; mp[tmp.x][tmp.y] &lt;= mp[xx][yy]) &#123;</span><br><span class="line">                vis[xx][yy][v - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                q.push(node&#123;xx, yy&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; mp[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">            vis[<span class="number">1</span>][i][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">            bfs(<span class="number">1</span>, i, <span class="number">1</span>);</span><br><span class="line">            vis[n][i][<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">            bfs(n, i, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            vis[i][<span class="number">1</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">            bfs(i, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            vis[i][m][<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">            bfs(i, m, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(vis[i][j][<span class="number">0</span>] &amp;&amp; vis[i][j][<span class="number">1</span>])&#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ZJYYCOJ</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>ZJYYCOJ-路线方案数</title>
    <url>/2020/02/25/ZJYYCOJ-%E8%B7%AF%E7%BA%BF%E6%96%B9%E6%A1%88%E6%95%B0/</url>
    <content><![CDATA[<h3 id="题目链接-http-acm-oinsm-com-problem-php-cid-1022-amp-pid-1"><a href="#题目链接-http-acm-oinsm-com-problem-php-cid-1022-amp-pid-1" class="headerlink" title="题目链接: http://acm.oinsm.com/problem.php?cid=1022&amp;pid=1"></a>题目链接: <a href="http://acm.oinsm.com/problem.php?cid=1022&pid=1" target="_blank" rel="noopener">http://acm.oinsm.com/problem.php?cid=1022&amp;pid=1</a></h3><p><img src="https://img-blog.csdnimg.cn/202002252350337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200225235042832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>比赛的时候，我看到这题，emmmm，一个递推题？，也许可以搜一下找规律，emmmm，n * n 的正方形，好像有点不好搜啊！！<br>晚上，又看了一边题目，2 * n, ！！！！想都不想，直接搜一下找规律！！</p>
<ul>
<li>暴搜找规律</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> : <span class="number">2</span></span><br><span class="line"><span class="number">2</span> : <span class="number">8</span></span><br><span class="line"><span class="number">3</span> : <span class="number">16</span> = <span class="number">8</span> + <span class="number">8</span></span><br><span class="line"><span class="number">4</span> : <span class="number">28</span> = <span class="number">16</span> + <span class="number">8</span> + <span class="number">4</span></span><br><span class="line"><span class="number">5</span> : <span class="number">44</span> = <span class="number">28</span> + <span class="number">8</span> + <span class="number">4</span> + <span class="number">4</span></span><br><span class="line"><span class="number">6</span> : <span class="number">64</span>		...</span><br><span class="line"><span class="number">7</span> : <span class="number">88</span>		...</span><br><span class="line"><span class="number">8</span> : <span class="number">116</span>		...</span><br><span class="line"><span class="number">9</span> : <span class="number">148</span>		...</span><br><span class="line"><span class="number">10</span> : <span class="number">184</span>	...</span><br><span class="line">这规律应该好找的，<span class="number">1</span>的时候要特判，后面都是由<span class="number">4</span>开始递增的！</span><br></pre></td></tr></table></figure>
<p>暴搜，打表输出！</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">155</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">3</span>][MAXN];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(x &lt; <span class="number">1</span> || x &gt; <span class="number">2</span> || y &lt; <span class="number">1</span> || y &gt; n || vis[x][y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; x &lt;&lt; " " &lt;&lt; y &lt;&lt; " " &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">2</span> * n)&#123;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x == y &amp;&amp; y == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(vis[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">                vis[i][j] = <span class="literal">true</span>;</span><br><span class="line">                dfs(i, j, cnt + <span class="number">1</span>);</span><br><span class="line">                vis[i][j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> xx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> yy = y + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(check(xx, yy)) &#123;</span><br><span class="line">                vis[xx][yy] = <span class="literal">true</span>;</span><br><span class="line">                dfs(xx, yy, cnt + <span class="number">1</span>);</span><br><span class="line">                vis[xx][yy] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        n = i;</span><br><span class="line">        fill(vis[<span class="number">0</span>], vis[<span class="number">0</span>] + (MAXN * <span class="number">3</span>), <span class="literal">false</span>);</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        dfs(<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" : "</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> num[<span class="number">100005</span>];		<span class="comment">// 什么递推题，dp题，直接无脑上long long</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//    getans(10);</span></span><br><span class="line">    num[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    num[<span class="number">2</span>] = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">100000</span>; i++)&#123;</span><br><span class="line">        num[i] = num[i - <span class="number">1</span>] + now;</span><br><span class="line">        now += <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>递推思路</li>
</ul>
]]></content>
      <categories>
        <category>ZJYYCOJ</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>递推</tag>
      </tags>
  </entry>
  <entry>
    <title>ZJYYCOJ-吃鸡路线</title>
    <url>/2020/02/25/ZJYYCOJ-%E5%90%83%E9%B8%A1%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<h3 id="题目链接-http-acm-oinsm-com-problem-php-cid-1022-amp-pid-10"><a href="#题目链接-http-acm-oinsm-com-problem-php-cid-1022-amp-pid-10" class="headerlink" title="题目链接:http://acm.oinsm.com/problem.php?cid=1022&amp;pid=10"></a>题目链接:<a href="http://acm.oinsm.com/problem.php?cid=1022&pid=10" target="_blank" rel="noopener">http://acm.oinsm.com/problem.php?cid=1022&amp;pid=10</a></h3><p>题目后续会在大题库开放！<br><img src="https://img-blog.csdnimg.cn/20200225231022875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h3><p>读完题目，就应该知道是一道模板的最短路径，而且，点的个数最多也就150，那么Floyd或者Dijkstra都可以轻松解决(QAQ,可是我并没有解决……</p>
<h3 id="题目坑点"><a href="#题目坑点" class="headerlink" title="题目坑点"></a>题目坑点</h3><p><del>从s到e,别以为是单向的</del>(QAQ,生活常识也可以知道，</p>
<ul>
<li>首先: 自己到自己，肯定得为0</li>
<li>其次，可能会有重边记得取min</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul>
<li>Dijkstra版</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">155</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; cityID;</span><br><span class="line"><span class="keyword">int</span> mp[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> dist[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    dist[start] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">-1</span>, minn = INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(dist[j] &lt; minn)&#123;</span><br><span class="line">                minn = dist[j];</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">-1</span>) <span class="keyword">return</span> ;        <span class="comment">// 说明已经完成，直接退出，</span></span><br><span class="line">        vis[k] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dist[j] &gt; dist[k] + mp[k][j]) &#123;</span><br><span class="line">                dist[j] = dist[k] + mp[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">        cityID.clear();</span><br><span class="line">        <span class="built_in">string</span> cstart, cend;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; cstart &gt;&gt; cend;</span><br><span class="line">        <span class="keyword">if</span>(!cityID.count(cstart)) cityID[cstart] = now++;</span><br><span class="line">        <span class="keyword">if</span>(!cityID.count(cend)) cityID[cend] = now++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXN; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; MAXN; j++)&#123;</span><br><span class="line">                mp[i][j] = mp[j][i] = INF;</span><br><span class="line">            &#125;</span><br><span class="line">            mp[i][i] = <span class="number">0</span>;</span><br><span class="line">            dist[i] = INF;</span><br><span class="line">            vis[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">string</span> a, b;</span><br><span class="line">            <span class="keyword">int</span> k;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; k;</span><br><span class="line">            <span class="keyword">if</span>(!cityID.count(a)) cityID[a] = now++;</span><br><span class="line">            <span class="keyword">if</span>(!cityID.count(b)) cityID[b] = now++;</span><br><span class="line">            mp[cityID[a]][cityID[b]] = mp[cityID[b]][cityID[a]] = min(mp[cityID[a]][cityID[b]], k);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Dijkstra(cityID[cstart], now);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(dist[cityID[cend]] == INF) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; dist[cityID[cend]] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Floyd版</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> MAXN = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; vit;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mp[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">(<span class="keyword">int</span> ms)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">155</span>; i++)&#123;</span><br><span class="line">        mp[i][i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; ms; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ms; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ms; j++)&#123;</span><br><span class="line">                mp[i][j] = min(mp[i][j], mp[i][k] + mp[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">        vit.clear();</span><br><span class="line">        <span class="built_in">string</span> a, b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">if</span>(!vit.count(a)) vit[a] = now++;</span><br><span class="line">        <span class="keyword">if</span>(!vit.count(b)) vit[b] = now++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">155</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j= i + <span class="number">1</span>; j &lt;= <span class="number">155</span>; j++)&#123;</span><br><span class="line">                mp[i][j] = mp[j][i] = INF;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">string</span> aa, bb;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> k;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; aa &gt;&gt; bb &gt;&gt; k;</span><br><span class="line">            <span class="keyword">if</span>(!vit.count(aa)) vit[aa] = now++;</span><br><span class="line">            <span class="keyword">if</span>(!vit.count(bb)) vit[bb] = now++;</span><br><span class="line">            mp[vit[aa]][vit[bb]] = mp[vit[bb]][vit[aa]] = min(k, mp[vit[aa]][vit[bb]]);</span><br><span class="line">        &#125;</span><br><span class="line">        Floyd(now);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(mp[vit[a]][vit[b]] == INF)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; mp[vit[a]][vit[b]] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>没有最后，溜了溜了，继续了…</p>
]]></content>
      <categories>
        <category>ZJYYCOJ</category>
      </categories>
      <tags>
        <tag>最短路径</tag>
        <tag>Dijkstra</tag>
        <tag>Floyd</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客小白月赛22-货物种类</title>
    <url>/2020/02/23/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%99%BD%E6%9C%88%E8%B5%9B22-%E8%B4%A7%E7%89%A9%E7%A7%8D%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="题目链接-https-ac-nowcoder-com-acm-contest-4462-H"><a href="#题目链接-https-ac-nowcoder-com-acm-contest-4462-H" class="headerlink" title="题目链接: https://ac.nowcoder.com/acm/contest/4462/H"></a>题目链接: <a href="https://ac.nowcoder.com/acm/contest/4462/H" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/4462/H</a></h3><p><img src="https://img-blog.csdnimg.cn/2020022313153591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>作为无脑型选手，上来看到这种区间题，不考虑复杂度(因为不会算QAQ)，直接上来搓一发线段树，那结果超时是必然的!!!(后面才想到有个差分序列….. 所以STL套一套 + 差分序列，求前缀和，就可以了</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;tmpa, <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;tmpb)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : tmpb) &#123;</span><br><span class="line">        tmpa[i.first] += i.second;</span><br><span class="line">        <span class="keyword">if</span>(tmpa[i.first] == <span class="number">0</span>)&#123;</span><br><span class="line">            tmpa.erase(i.first);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    mp.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; b) swap(a, b);</span><br><span class="line">        mp[a][c]++;</span><br><span class="line">        mp[b + <span class="number">1</span>][c]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>, maxn = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; tmp;</span><br><span class="line">    tmp.clear();</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        solve(tmp, mp[i]);</span><br><span class="line">        <span class="keyword">int</span> k = tmp.size();</span><br><span class="line">        <span class="keyword">if</span>(k &gt; maxn) &#123;</span><br><span class="line">            maxn = k;</span><br><span class="line">            ans = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客小白月赛22</category>
      </categories>
      <tags>
        <tag>牛客</tag>
        <tag>STL</tag>
        <tag>差分序列</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客小白月赛22- 收集纸片</title>
    <url>/2020/02/23/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%99%BD%E6%9C%88%E8%B5%9B22-%E6%94%B6%E9%9B%86%E7%BA%B8%E7%89%87/</url>
    <content><![CDATA[<h3 id="题目链接：https-ac-nowcoder-com-acm-contest-4462-D"><a href="#题目链接：https-ac-nowcoder-com-acm-contest-4462-D" class="headerlink" title="题目链接：https://ac.nowcoder.com/acm/contest/4462/D"></a>题目链接：<a href="https://ac.nowcoder.com/acm/contest/4462/D" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/4462/D</a></h3><p><img src="https://img-blog.csdnimg.cn/20200223125016478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>因为菜所以才参加小白月赛，这题，题目读完应该就晓得是一道搜索(不排除有更好的方法QAQ), 这题搞了我半天，错在于求最短的距离我写成了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">abs</span>(ve[i - <span class="number">1</span>].x - ve[j - <span class="number">1</span>].x) + <span class="built_in">abs</span>(ve[i - <span class="number">1</span>].y - ve[j - <span class="number">1</span>].y);</span><br></pre></td></tr></table></figure>
<p>题目规定了只能沿着x轴，y轴移动，所以得这样求</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">abs</span>(ve[i - <span class="number">1</span>].x - ve[j - <span class="number">1</span>].x) + <span class="built_in">abs</span>(ve[i - <span class="number">1</span>].y - ve[j - <span class="number">1</span>].y);</span><br></pre></td></tr></table></figure>
<p>emmmm，可能是打着打着想睡了，QAQ</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;you;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; mp;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; vis;</span><br><span class="line"><span class="keyword">int</span> minn;</span><br><span class="line"><span class="keyword">int</span> vit[<span class="number">15</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, t, k;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> cnt, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; now &lt;&lt; " " &lt;&lt; cnt &lt;&lt; " " &lt;&lt; sum &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">if</span>(cnt == k) &#123;</span><br><span class="line">        minn = min(minn, sum + vis[now]);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vit[i]) <span class="keyword">continue</span>;</span><br><span class="line">        vit[i] = <span class="number">1</span>;</span><br><span class="line">        dfs(i, cnt + <span class="number">1</span>, sum + mp[now][i]);</span><br><span class="line">        vit[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    fill(vit, vit + <span class="number">15</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; you.x &gt;&gt; you.y;</span><br><span class="line">        <span class="built_in">vector</span>&lt;node&gt; ve;</span><br><span class="line">        ve.clear();</span><br><span class="line">        mp.clear();</span><br><span class="line">        vis.clear();</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> a, b;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            <span class="comment">// 题目说明了不会存在纸片在房间外面所以没必要写，但写了增加啥来着，忘了QAQ</span></span><br><span class="line">            <span class="keyword">if</span>(a &gt; n || a &lt; <span class="number">1</span> || b &gt; m || b &lt; <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            sum++;</span><br><span class="line">            ve.push_back(node&#123;a, b&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        k = sum;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= k; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</span><br><span class="line">                mp[i][j] = mp[j][i] = <span class="built_in">abs</span>(ve[i - <span class="number">1</span>].x - ve[j - <span class="number">1</span>].x) + <span class="built_in">abs</span>(ve[i - <span class="number">1</span>].y - ve[j - <span class="number">1</span>].y);</span><br><span class="line">            &#125;</span><br><span class="line">            vis[i] = <span class="built_in">abs</span>(ve[i - <span class="number">1</span>].x - you.x) + <span class="built_in">abs</span>(ve[i - <span class="number">1</span>].y - you.y);</span><br><span class="line">        &#125;</span><br><span class="line">        minn = n * m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</span><br><span class="line">            vit[i] = <span class="number">1</span>;</span><br><span class="line">            dfs(i, <span class="number">1</span>, vis[i]);</span><br><span class="line">            vit[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"The shortest path has length "</span> &lt;&lt; minn &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客小白月赛22</category>
      </categories>
      <tags>
        <tag>牛客</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>2020牛客寒假算法基础集训营1-nico和niconiconi</title>
    <url>/2020/02/22/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A51-nico%E5%92%8Cniconiconi/</url>
    <content><![CDATA[<h3 id="题目链接-https-ac-nowcoder-com-acm-contest-3002-I"><a href="#题目链接-https-ac-nowcoder-com-acm-contest-3002-I" class="headerlink" title="题目链接: https://ac.nowcoder.com/acm/contest/3002/I"></a>题目链接: <a href="https://ac.nowcoder.com/acm/contest/3002/I" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/3002/I</a></h3><p><img src="https://img-blog.csdnimg.cn/20200222150433721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路"></a>题解思路</h3><p>一道并不是很难，也很好理解的dp<br><img src="https://img-blog.csdnimg.cn/20200222150600522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">300005</span>;</span><br><span class="line"><span class="built_in">string</span> dir[<span class="number">5</span>] = &#123;<span class="string">"nico"</span>, <span class="string">"niconi"</span>, <span class="string">"niconiconi"</span>&#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n, a, b, c;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    fill(dp, dp + n + <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>.get();</span><br><span class="line">    getline(<span class="built_in">cin</span>, s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= <span class="number">4</span> &amp;&amp; s.substr(i - <span class="number">4</span>, <span class="number">4</span>) == dir[<span class="number">0</span>]) &#123;</span><br><span class="line">            dp[i] = max(dp[i], dp[i - <span class="number">4</span>] + a);</span><br><span class="line"><span class="comment">//            cout &lt;&lt; 1 &lt;&lt; " " &lt;&lt; i &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= <span class="number">6</span> &amp;&amp; s.substr(i - <span class="number">6</span>, <span class="number">6</span>) == dir[<span class="number">1</span>]) &#123;</span><br><span class="line">            dp[i] = max(dp[i], dp[i - <span class="number">6</span>] + b);</span><br><span class="line"><span class="comment">//            cout &lt;&lt; 2 &lt;&lt; " " &lt;&lt; i &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= <span class="number">10</span> &amp;&amp; s.substr(i - <span class="number">10</span>, <span class="number">10</span>) == dir[<span class="number">2</span>]) &#123;</span><br><span class="line">            dp[i] = max(dp[i], dp[i - <span class="number">10</span>] + c);</span><br><span class="line"><span class="comment">//            cout &lt;&lt; 3 &lt;&lt; " " &lt;&lt; i &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dp[i] = max(dp[i], dp[i - <span class="number">1</span>]);      <span class="comment">// i 之前的最高得分</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>2020牛客寒假算法基础集训营</category>
      </categories>
      <tags>
        <tag>牛客</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>2020牛客寒假算法基础集训营1-maki和tree</title>
    <url>/2020/02/22/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A51-maki%E5%92%8Ctree/</url>
    <content><![CDATA[<h3 id="题目链接-https-ac-nowcoder-com-acm-contest-3002-F"><a href="#题目链接-https-ac-nowcoder-com-acm-contest-3002-F" class="headerlink" title="题目链接:https://ac.nowcoder.com/acm/contest/3002/F"></a>题目链接:<a href="https://ac.nowcoder.com/acm/contest/3002/F" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/3002/F</a><img src="https://img-blog.csdnimg.cn/20200222134931125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></h3><h3 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路:"></a>题解思路:</h3><p>思路统计连通块白点的个数(可用并查集，或者搜索)</p>
<ul>
<li>搜索: <a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=42763870" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/view-submission?submissionId=42763870</a></li>
<li>并查集: <a href="https://blog.csdn.net/qq_42815188/article/details/104220706" target="_blank" rel="noopener">https://blog.csdn.net/qq_42815188/article/details/104220706</a><br><img src="https://img-blog.csdnimg.cn/20200222135045134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; mp;</span><br><span class="line"><span class="keyword">int</span> vis[MAXN], num[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> now)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(now);</span><br><span class="line">    tmp.push_back(now);</span><br><span class="line">    vis[now] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;        <span class="comment">// now 也算一个</span></span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> k = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">int</span> vsize = mp[k].size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vsize; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[mp[k][i]] == <span class="number">0</span>) &#123;</span><br><span class="line">                q.push(mp[k][i]);</span><br><span class="line">                vis[mp[k][i]] = <span class="number">1</span>;</span><br><span class="line">                tmp.push_back(mp[k][i]);</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    mp.resize(n + <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    fill(vis, vis + MAXN, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> len = s.length();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">'B'</span>)&#123;</span><br><span class="line">            <span class="comment">// 黑色</span></span><br><span class="line">            vis[i + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        mp[a].push_back(b);</span><br><span class="line">        mp[b].push_back(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="comment">// 如果是黑色</span></span><br><span class="line">        <span class="keyword">if</span>(vis[i] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">1</span>;    <span class="comment">// 分两种情况， 1. 一个端点是黑色， 2. 两点都是白色</span></span><br><span class="line">            <span class="keyword">int</span> vsize = mp[i].size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vsize; j++)&#123;</span><br><span class="line">                <span class="comment">// 该点是白色</span></span><br><span class="line">                <span class="keyword">if</span>(vis[mp[i][j]] == <span class="number">0</span>) &#123;</span><br><span class="line">                    num[now++] = bfs(mp[i][j]);</span><br><span class="line">                    sum += num[now - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 去除标记</span></span><br><span class="line">            <span class="keyword">while</span>(!tmp.empty()) &#123;</span><br><span class="line">                vis[tmp.back()] = <span class="number">0</span>;</span><br><span class="line">                tmp.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 统计</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; now; j++)&#123;</span><br><span class="line">                ans += num[j] * (sum - num[j]);     <span class="comment">// 1. num[j] * (sum - num[j] - 1) 2. num[j] * 1</span></span><br><span class="line">                sum = sum - num[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>2020牛客寒假算法基础集训营</category>
      </categories>
      <tags>
        <tag>牛客</tag>
        <tag>BFS</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-element-admin 解决跨域问题</title>
    <url>/2020/02/12/vue-element-admin-%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>今天看了很多博客，有的博客解决方法都是以前的，新版貌似不适用!<br>处理方法来自博客:  <a href="https://blog.csdn.net/qq_42120178/article/details/102757615" target="_blank" rel="noopener">https://blog.csdn.net/qq_42120178/article/details/102757615</a><br>感谢该博主写的博客，解决了我研究一下午的问题!!!!!</p>
<ul>
<li>首先，打开vue.config.js，在devServer里，写入如图所示的配置信息， target 为转发的url，</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200212172828431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>修改.env.development 配置，直接为空就好了</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200212173045729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>测试，访问，是不是发现url还是本地的，不过没事已经请求成功，原因是因为我们使用了代理，转发，<br><img src="https://img-blog.csdnimg.cn/20200212173234169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
]]></content>
      <categories>
        <category>vue-element-admin</category>
      </categories>
      <tags>
        <tag>跨域</tag>
        <tag>vue-element-admin</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery ajax 跨域请求问题</title>
    <url>/2020/02/12/jquery-ajax-%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>一般处理跨域问题的方法，但是处理完后，会遇到无数据返回的问题，应该是安全策略的问题，所以转向去使用vue的反向代理，来解决跨域问题!服务器上用nginx反向代理来解决!</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">			url: &#39;xxx&#39;,</span><br><span class="line">			type: &#39;get&#39;,</span><br><span class="line">			async: false,</span><br><span class="line">			dataType: &#39;jsonp&#39;,</span><br><span class="line">			jsonp: &#39;callback&#39;,</span><br><span class="line">			scriptCharset: &#39;utf-8&#39;,</span><br><span class="line">			jsonpCallback: &quot;jsonpCallback&quot;,</span><br><span class="line">			success: function(data) &#123;</span><br><span class="line">				console.log(data);</span><br><span class="line">			&#125;,</span><br><span class="line">			error:function(err) &#123;</span><br><span class="line">				console.log(err);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
        <tag>Ajax</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel框架的入门篇-配置安装访问</title>
    <url>/2020/01/26/Laravel%E6%A1%86%E6%9E%B6%E7%9A%84%E5%85%A5%E9%97%A8%E7%AF%87-%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<p>@<a href="Laravel框架的入门篇">TOC</a></p>
<ul>
<li>安装Composer等开发环境，具体可以看: <a href="https://learnku.com/courses/laravel-essential-training/6.x/the-first-application-hello-laravel/5443" target="_blank" rel="noopener">https://learnku.com/courses/laravel-essential-training/6.x/the-first-application-hello-laravel/5443</a></li>
<li>安装好laravel等环境后，配置host，通过虚拟域名可以直接访问你的网站！<ol>
<li>我装的是Xampp + apache，首先，打开httpd.conf, 去掉Include conf/extra/httpd-vhosts.conf前面的#，然后保存<br><img src="https://img-blog.csdnimg.cn/20200126161558133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200126161658804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>去apache目录下找到httpd-vhosts.conf这个文件，并打开<br><img src="https://img-blog.csdnimg.cn/20200126161811458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>添加对应虚拟域名的配置，以及在host文件中<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;host文件中添加虚拟域名，host文件在C:\Windows\System32\drivers\etc\hosts</span><br><span class="line">127.0.0.1 www.demosite.com</span><br><span class="line">&#x2F;&#x2F;httpd-vhosts.conf文件中</span><br><span class="line">&lt;VirtualHost *:888&gt;</span><br><span class="line">    ServerAdmin webmaster@dummy-host.example.com</span><br><span class="line">    DocumentRoot &quot;C:\xampp\htdocs\zifengelme\zifengelme\public&quot;</span><br><span class="line">    ServerName www.demosite.com</span><br><span class="line">    ServerAlias www.demosite.com</span><br><span class="line">    ErrorLog &quot;logs&#x2F;dummy-host.example.com-error.log&quot;</span><br><span class="line">    CustomLog &quot;logs&#x2F;dummy-host.example.com-access.log&quot; common</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure></li>
<li>当然配置完以后要重启nginx，或者apache, 然后打开浏览器访问<a href="http://www.demosite.com即可" target="_blank" rel="noopener">www.demosite.com即可</a><br><img src="https://img-blog.csdnimg.cn/20200126162350389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>并查集知识点回顾(最小生成树)</title>
    <url>/2019/10/04/%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%9F%A5%E8%AF%86%E7%82%B9%E5%9B%9E%E9%A1%BE-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
    <content><![CDATA[<h3 id="题目链接-https-www-luogu-org-problem-P1111"><a href="#题目链接-https-www-luogu-org-problem-P1111" class="headerlink" title="题目链接: https://www.luogu.org/problem/P1111"></a>题目链接: <a href="https://www.luogu.org/problem/P1111" target="_blank" rel="noopener">https://www.luogu.org/problem/P1111</a></h3><h3 id="思路-先以时间排序，然后一条一条连接，直到连接了n-1条边，即可输出最小时间，否则输出-1；n个点要使得任意一个点与另一个相连，那最少需要n-1条边！"><a href="#思路-先以时间排序，然后一条一条连接，直到连接了n-1条边，即可输出最小时间，否则输出-1；n个点要使得任意一个点与另一个相连，那最少需要n-1条边！" class="headerlink" title="思路: 先以时间排序，然后一条一条连接，直到连接了n-1条边，即可输出最小时间，否则输出-1；n个点要使得任意一个点与另一个相连，那最少需要n-1条边！"></a>思路: 先以时间排序，然后一条一条连接，直到连接了n-1条边，即可输出最小时间，否则输出-1；n个点要使得任意一个点与另一个相连，那最少需要n-1条边！</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int vis[100005];</span><br><span class="line">struct node&#123;</span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">    int v;</span><br><span class="line">&#125;;</span><br><span class="line">int findx(int x)</span><br><span class="line">&#123;</span><br><span class="line">    int r &#x3D; x;</span><br><span class="line">    while(r !&#x3D; vis[r])</span><br><span class="line">        r &#x3D; vis[r];</span><br><span class="line">    int k &#x3D; x, tmp;</span><br><span class="line">    while(k !&#x3D; r)&#123;</span><br><span class="line">        tmp &#x3D; vis[k];</span><br><span class="line">        vis[k] &#x3D; r;</span><br><span class="line">        k &#x3D; tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br><span class="line">int marge(int a, int b)&#123;</span><br><span class="line">    int x &#x3D; findx(a);</span><br><span class="line">    int y &#x3D; findx(b);</span><br><span class="line">    if(x !&#x3D; y)&#123;</span><br><span class="line">        vis[y] &#x3D; x;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">int cmp(node a, node b)&#123;</span><br><span class="line">    return a.v &lt; b.v;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    ios::sync_with_stdio(false);</span><br><span class="line">    int n, m;</span><br><span class="line">    while(cin &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line">        vector&lt;node&gt; ve;</span><br><span class="line">        for(int i &#x3D; 1; i &lt;&#x3D; n; i++) vis[i] &#x3D; i;</span><br><span class="line">        for(int i &#x3D; 1; i &lt;&#x3D; m; i++)&#123;</span><br><span class="line">            int a, b, c;</span><br><span class="line">            cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">            ve.push_back(node&#123;a, b, c&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(ve.begin(), ve.end(), cmp);</span><br><span class="line">        for(int i &#x3D; 0; i &lt; m; i++)&#123;</span><br><span class="line">            n +&#x3D; marge(ve[i].x, ve[i].y);</span><br><span class="line">            &#x2F;&#x2F;cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">            if(n &#x3D;&#x3D; 1)&#123;</span><br><span class="line">                cout &lt;&lt; ve[i].v &lt;&lt; endl;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(n !&#x3D; 1)&#123;</span><br><span class="line">            cout &lt;&lt; -1 &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>并查集</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客暑期多校训练营(第八场场)_E题 Explorer(线段树+可撤销并查集)</title>
    <url>/2019/09/06/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E5%85%AB%E5%9C%BA%E5%9C%BA-E%E9%A2%98-Explorer-%E7%BA%BF%E6%AE%B5%E6%A0%91-%E5%8F%AF%E6%92%A4%E9%94%80%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    <content><![CDATA[<h3 id="题目链接-https-ac-nowcoder-com-acm-contest-888-E"><a href="#题目链接-https-ac-nowcoder-com-acm-contest-888-E" class="headerlink" title="题目链接: https://ac.nowcoder.com/acm/contest/888/E"></a>题目链接: <a href="https://ac.nowcoder.com/acm/contest/888/E" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/888/E</a></h3><p>题意: 给你一张无向图，每条边ui,vi的权值范围为[Li,Ri]，要经过这条边的条件是你的容量要在[Li,Ri]，现在问你你有多少种容量使得你可以从1走到n。</p>
<p>思路: 首先会想到离散化，离散l, r, 然后用线段树去维护这个区间(区间左闭，右开)，每个节点存放这个容量可以通过哪些路径，最后遍历这颗树，使用可撤销并查集，来判断1是否能到n然后统计答案！</p>
<h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul>
<li><a href="https://www.cnblogs.com/Dillonh/p/11334020.html" target="_blank" rel="noopener">https://www.cnblogs.com/Dillonh/p/11334020.html</a></li>
<li><a href="https://www.cnblogs.com/KirinSB/p/11391003.html" target="_blank" rel="noopener">https://www.cnblogs.com/KirinSB/p/11391003.html</a></li>
<li>以及师傅的代码</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>第一次写可撤销并查集，代码有些乱，别见怪</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">200005</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; node[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ve;</span><br><span class="line"><span class="keyword">int</span> ans, n, m, tot;</span><br><span class="line"><span class="keyword">int</span> vis[MAXN], num[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">&#125;em[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ve.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[root].<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    Build(root&lt;&lt;<span class="number">1</span>, l, mid);</span><br><span class="line">    Build(root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; add)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">        node[root].push_back(add);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)&#123;</span><br><span class="line">        updata(root&lt;&lt;<span class="number">1</span>, l, mid, L, R, add);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(R &gt; mid)&#123;</span><br><span class="line">        updata(root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, add);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getID</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (lower_bound(ve.<span class="built_in">begin</span>(), ve.<span class="built_in">end</span>(), x) - ve.<span class="built_in">begin</span>() +  <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">findx</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = x;</span><br><span class="line">    <span class="keyword">while</span>(r != vis[r])&#123;</span><br><span class="line">        r = vis[r];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> info <span class="title">marge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = findx(a), y = findx(b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(x == y) <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(num[x] &gt; num[y]) swap(x, y);</span><br><span class="line"></span><br><span class="line">    info tmp = &#123;x, y, num[y]&#125;;</span><br><span class="line"></span><br><span class="line">    vis[x] = y;</span><br><span class="line">    num[y] = <span class="built_in">max</span>(num[y], num[x] + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;info&gt; st;</span><br><span class="line">    <span class="keyword">int</span> len = node[root].<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">//并查集</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        info tmp = marge(node[root][i].first, node[root][i].second);</span><br><span class="line">        <span class="keyword">if</span>(tmp.u != <span class="number">-1</span>) st.push(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//可以从1到n</span></span><br><span class="line">    <span class="keyword">if</span>(findx(<span class="number">1</span>) == findx(n))&#123;</span><br><span class="line">        ans += ve[r] - ve[l - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l != r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        dfs(root&lt;&lt;<span class="number">1</span>, l, mid);</span><br><span class="line">        dfs(root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//撤销并查集</span></span><br><span class="line">    <span class="keyword">while</span>(st.<span class="built_in">size</span>())&#123;</span><br><span class="line">        info tmp = st.top();</span><br><span class="line">        st.pop();</span><br><span class="line">        vis[tmp.u] = tmp.u;</span><br><span class="line">        vis[tmp.v] = tmp.v;</span><br><span class="line">        num[tmp.v] = tmp.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; em[i].u &gt;&gt; em[i].v &gt;&gt; em[i].l &gt;&gt; em[i].r;</span><br><span class="line">            em[i].r += <span class="number">1</span>;</span><br><span class="line">            ve.push_back(em[i].l);</span><br><span class="line">            ve.push_back(em[i].r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//离散化</span></span><br><span class="line">        sort(ve.<span class="built_in">begin</span>(), ve.<span class="built_in">end</span>());</span><br><span class="line">        ve.erase(unique(ve.<span class="built_in">begin</span>(), ve.<span class="built_in">end</span>()), ve.<span class="built_in">end</span>());</span><br><span class="line">        tot = ve.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        Build(<span class="number">1</span>, <span class="number">1</span>, tot);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">            <span class="comment">//左闭 右开</span></span><br><span class="line">            updata(<span class="number">1</span>, <span class="number">1</span>, tot, getID(em[i].l), getID(em[i].r) - <span class="number">1</span>, make_pair(em[i].u, em[i].v));</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            vis[i] = i;</span><br><span class="line">            num[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">1</span>, <span class="number">1</span>, tot);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>2019牛客暑期多校训练营</category>
      </categories>
      <tags>
        <tag>牛客</tag>
        <tag>线段树</tag>
        <tag>可撤销并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 72 (Rated for Div. 2)A题Creating a Character</title>
    <url>/2019/09/06/Educational-Codeforces-Round-72-Rated-for-Div-2-A%E9%A2%98Creating-a-Character/</url>
    <content><![CDATA[<h3 id="题目链接-http-codeforces-com-contest-1217-problem-A"><a href="#题目链接-http-codeforces-com-contest-1217-problem-A" class="headerlink" title="题目链接: http://codeforces.com/contest/1217/problem/A"></a>题目链接: <a href="http://codeforces.com/contest/1217/problem/A" target="_blank" rel="noopener">http://codeforces.com/contest/1217/problem/A</a></h3><p>题意：每种角色都有2个属性值一个是力量，一个是智力，然后每1点经验值可以提升1点的力量，或智力！给你一个原有的角色的两个属性值a (力量) b(智力), 以及c点经验值， 问最多可以创造出几个不同的力量角色(力量角色即力量值大于智力值)(智力或力量值不同，则认为是不同的角色)！</p>
<p>思路: 一开始我就想到，这不就解个方程吗， a + x &gt; b + c - x if else 搞一搞就好了， 其实，反而把这道题搞难了，其实这样想， 要是 能够创造新的角色(即a +  c &gt; b) 那最多的数量不会超过 c + 1 个，<br>那么我们让 c += (a - b), 使得 a == b，又因为我们要让 a + x &gt; b + c - x (a == b), 即x &gt; c - x, 那么总数就是 (c % 2 == 0 ? c / 2 : c / 2 + 1);</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; t)&#123;</span><br><span class="line">        <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> a, b, c;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">            <span class="keyword">if</span>((a + c) &lt;= b)&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">min</span>(c + <span class="number">1</span>, (c + a - b + <span class="number">1</span>) / <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>思路</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客暑期多校训练营(第七场场)_C题Governing sand(权值线段树+枚举)</title>
    <url>/2019/09/06/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E4%B8%83%E5%9C%BA%E5%9C%BA-C%E9%A2%98Governing-sand-%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91-%E6%9E%9A%E4%B8%BE/</url>
    <content><![CDATA[<h3 id="题目链接-https-ac-nowcoder-com-acm-contest-887-C"><a href="#题目链接-https-ac-nowcoder-com-acm-contest-887-C" class="headerlink" title="题目链接: https://ac.nowcoder.com/acm/contest/887/C"></a>题目链接: <a href="https://ac.nowcoder.com/acm/contest/887/C" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/887/C</a></h3><p>题意： 给你n种树，以及它的高度，被砍掉的代价，以及它的数量，问你，砍掉一些树后，使得剩下的树中，最高的树的数量是剩下总数的一半 + 1 以上！<br>思路: 很明确，直接枚举，从最高的树往低的树枚举，然后用权值线段树来维护相应树的数量以及相应的代价！</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>因为没写过权值线段树的代码，所以到师傅那学了下，自己手敲了一遍，wa了几发，离散化下表忘记加1了，代码有点乱希望别介意！</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF = <span class="number">0xffffffffffffff</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> num;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> val;</span><br><span class="line">&#125;nodes[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">     <span class="keyword">long</span> <span class="keyword">long</span> <span class="built_in">height</span>;</span><br><span class="line">     <span class="keyword">long</span> <span class="keyword">long</span> val;</span><br><span class="line">     <span class="keyword">long</span> <span class="keyword">long</span> num;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (tree a, tree b)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">return</span> a.<span class="built_in">height</span> &gt; b.<span class="built_in">height</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;em[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于离散化</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; ve;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getID</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (lower_bound(ve.<span class="built_in">begin</span>(), ve.<span class="built_in">end</span>(), x) - ve.<span class="built_in">begin</span>()) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ve.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nodes[root].num = nodes[root&lt;&lt;<span class="number">1</span>].num + nodes[root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].num;</span><br><span class="line">    nodes[root].val = nodes[root&lt;&lt;<span class="number">1</span>].val + nodes[root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//建树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//记得每个节点都要初始化</span></span><br><span class="line">    nodes[root].num = nodes[root].val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    Build(root&lt;&lt;<span class="number">1</span>, l, mid);</span><br><span class="line">    Build(root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k, <span class="keyword">long</span> <span class="keyword">long</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        nodes[root].num += val;</span><br><span class="line">        nodes[root].val += ve[l - <span class="number">1</span>] * val;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(k &lt;= mid)&#123;</span><br><span class="line">        add(root&lt;&lt;<span class="number">1</span>, l , mid, k, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        add(root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, k, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PushUp(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">long</span> <span class="keyword">long</span> neednum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(neednum &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// 不用砍树了 当然返回0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        <span class="keyword">return</span> ve[l - <span class="number">1</span>] * neednum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(neednum &lt; nodes[root&lt;&lt;<span class="number">1</span>].num)&#123;</span><br><span class="line">        ans += query(root&lt;&lt;<span class="number">1</span>, l, mid, neednum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        ans += nodes[root&lt;&lt;<span class="number">1</span>].val;</span><br><span class="line">        ans += query(root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, neednum - nodes[root&lt;&lt;<span class="number">1</span>].num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; em[i].<span class="built_in">height</span> &gt;&gt; em[i].val &gt;&gt; em[i].num;</span><br><span class="line">            ve.push_back(em[i].val);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(em + <span class="number">1</span>, em + <span class="number">1</span> + n);</span><br><span class="line">        sort(ve.<span class="built_in">begin</span>(), ve.<span class="built_in">end</span>());</span><br><span class="line">        ve.erase(unique(ve.<span class="built_in">begin</span>(), ve.<span class="built_in">end</span>()), ve.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        Build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> totnum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            totnum += em[i].num;</span><br><span class="line">            add(<span class="number">1</span>, <span class="number">1</span>, n, getID(em[i].val), em[i].num);      <span class="comment">//离散化后把树的数量代价给加进去</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = INF, now_num = <span class="number">0</span>, now_val = <span class="number">0</span>, nums = <span class="number">0</span>, vals = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            now_num += em[i].num;</span><br><span class="line">            now_val += em[i].val * em[i].num;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i != n - <span class="number">1</span> &amp;&amp; em[i].<span class="built_in">height</span> == em[i + <span class="number">1</span>].<span class="built_in">height</span>)&#123;</span><br><span class="line">                add(<span class="number">1</span>, <span class="number">1</span>, n, getID(em[i].val), -em[i].num);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            add(<span class="number">1</span>, <span class="number">1</span>, n, getID(em[i].val), -em[i].num);    <span class="comment">// 砍掉这类树</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> neednum = totnum - (now_num * <span class="number">2</span> - <span class="number">1</span>); <span class="comment">//比一半多</span></span><br><span class="line"></span><br><span class="line">            ans = <span class="built_in">min</span>(ans, vals + query(<span class="number">1</span>, <span class="number">1</span>, n, neednum));</span><br><span class="line"></span><br><span class="line">            vals += now_val;</span><br><span class="line">            totnum -= now_num;</span><br><span class="line">            now_val = now_num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(vals &gt; ans)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>2019牛客暑期多校训练营</category>
      </categories>
      <tags>
        <tag>牛客</tag>
        <tag>权值线段树</tag>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>单调队列和单调栈</title>
    <url>/2019/09/02/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E5%92%8C%E5%8D%95%E8%B0%83%E6%A0%88/</url>
    <content><![CDATA[<h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul>
<li>偷个懒，关于这两个知识点的详细解释百度一堆，所以就直接用大佬的了!</li>
<li><a href="https://blog.csdn.net/u011893609/article/details/78806089" target="_blank" rel="noopener">https://blog.csdn.net/u011893609/article/details/78806089</a></li>
<li><a href="https://www.cnblogs.com/hanruyun/p/9614115.html" target="_blank" rel="noopener">https://www.cnblogs.com/hanruyun/p/9614115.html</a></li>
</ul>
<h3 id="单调队列例题"><a href="#单调队列例题" class="headerlink" title="单调队列例题"></a>单调队列例题</h3><ul>
<li>洛谷P1886 滑动窗口 ： <a href="https://www.luogu.org/problem/P1886" target="_blank" rel="noopener">https://www.luogu.org/problem/P1886</a><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">deque</span>&lt;node&gt; q;</span><br><span class="line">    <span class="comment">//维护单调递增</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>() &amp;&amp; q.front().index &lt;= (i - k))</span><br><span class="line">            q.pop_front();</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>() &amp;&amp; q.back().val &gt;= a[i])</span><br><span class="line">            q.pop_back();</span><br><span class="line">        q.push_back(node&#123;a[i], i&#125;);</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= k) <span class="built_in">cout</span> &lt;&lt; q.front().val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>()) q.pop_front();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//维护单调递减</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>() &amp;&amp; q.front().index &lt;= (i - k))</span><br><span class="line">            q.pop_front();</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>() &amp;&amp; q.back().val &lt;= a[i])</span><br><span class="line">            q.pop_back();</span><br><span class="line">        q.push_back(node&#123;a[i], i&#125;);</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= k) <span class="built_in">cout</span> &lt;&lt; q.front().val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>洛谷P12032 扫描 : <a href="https://www.luogu.org/problem/P2032" target="_blank" rel="noopener">https://www.luogu.org/problem/P2032</a><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">deque</span>&lt;node&gt; q;</span><br><span class="line">    <span class="comment">//维护单调递减</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>() &amp;&amp; q.front().index &lt;= (i - k))</span><br><span class="line">            q.pop_front();</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>() &amp;&amp; q.back().val &lt;= a[i])</span><br><span class="line">            q.pop_back();</span><br><span class="line">        q.push_back(node&#123;a[i], i&#125;);</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= k) <span class="built_in">cout</span> &lt;&lt; q.front().val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>单调栈</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客暑期多校训练营(第四场场)_C题sequence(线段树+单调栈)</title>
    <url>/2019/09/02/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E5%9B%9B%E5%9C%BA%E5%9C%BA-C%E9%A2%98sequence-%E7%BA%BF%E6%AE%B5%E6%A0%91-%E5%8D%95%E8%B0%83%E6%A0%88/</url>
    <content><![CDATA[<h3 id="题目链接-https-ac-nowcoder-com-acm-contest-884-C"><a href="#题目链接-https-ac-nowcoder-com-acm-contest-884-C" class="headerlink" title="题目链接: https://ac.nowcoder.com/acm/contest/884/C"></a>题目链接: <a href="https://ac.nowcoder.com/acm/contest/884/C" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/884/C</a></h3><p>题意：给你两个长度为n的序列 a, b,  选一个子区间[l, r], 会得到一个值为 a序列在[l, r] 中的最小值 乘上 b序列[l, r]的和, 问这个值最大是多少？</p>
<p>思路：</p>
<ul>
<li><p>首先， 我们记录下 以当前这个数a[i], 它在那个区间内是最小值, 记录 L[i], R[i]</p>
</li>
<li><p>然后我们用线段树维护前缀和</p>
</li>
<li><p>当a[i] 大于等于0 时，最大值就是这个数a[i] 乘上 和最大的那个区间(即，在[i, R[i]] 中的前缀和最大值 - 在[L[i], i - 1] 中的前缀和最小值)</p>
</li>
<li><p>当a[i] 小于 0 时，要使得值最大，即使得区间值最小,  所以就是 a[i] 乘上 （在[i, R[i]] 中的前缀和最小值 - 在[L[i], i - 1] 中的前缀和最大值) </p>
</li>
<li><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3></li>
<li><p><a href="https://www.cnblogs.com/wuliking/p/11261576.html" target="_blank" rel="noopener">https://www.cnblogs.com/wuliking/p/11261576.html</a></p>
</li>
<li><p><a href="https://blog.csdn.net/anthony1314/article/details/97535853" target="_blank" rel="noopener">https://blog.csdn.net/anthony1314/article/details/97535853</a></p>
</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3000005</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> node[<span class="number">2</span>][MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> per[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[MAXN], b[MAXN];</span><br><span class="line"><span class="keyword">int</span> l[MAXN], r[MAXN];</span><br><span class="line"><span class="comment">//更新数据</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//最大最小</span></span><br><span class="line">    node[<span class="number">0</span>][root] = <span class="built_in">max</span>(node[<span class="number">0</span>][root&lt;&lt;<span class="number">1</span>], node[<span class="number">0</span>][root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    node[<span class="number">1</span>][root] = <span class="built_in">min</span>(node[<span class="number">1</span>][root&lt;&lt;<span class="number">1</span>], node[<span class="number">1</span>][root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.建树</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span>     <span class="comment">//[l,r]当前节点的区间, root 当前节点的编号</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        <span class="comment">//说明当前已经到达叶子节点</span></span><br><span class="line">        node[<span class="number">0</span>][root] = node[<span class="number">1</span>][root] = per[l];    <span class="comment">//建树先左后右</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//继续递归建树</span></span><br><span class="line">    BuildTree(root&lt;&lt;<span class="number">1</span>, l, mid);<span class="comment">//左</span></span><br><span class="line">    BuildTree(root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r);<span class="comment">//右</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他操作(例如更新区间和)</span></span><br><span class="line">    PushUp(root);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查最大值</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">QueryMax</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// root 当前节点的编号, [l,r] 线段树区间, [L,R] 需要修改的区间范围</span></span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">        <span class="comment">//当前区间在查询区间内, 直接返回节点值</span></span><br><span class="line">        <span class="keyword">return</span> node[<span class="number">0</span>][root];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">-1e18</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)</span><br><span class="line">        ans = <span class="built_in">max</span>(QueryMax(root&lt;&lt;<span class="number">1</span>, l, mid, L, R), ans);</span><br><span class="line">    <span class="keyword">if</span>(R &gt; mid)</span><br><span class="line">        ans = <span class="built_in">max</span>(QueryMax(root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, L, R), ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查最小值</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">QueryMin</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// root 当前节点的编号, [l,r] 线段树区间, [L,R] 需要修改的区间范围</span></span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">        <span class="comment">//当前区间在查询区间内, 直接返回节点值</span></span><br><span class="line">        <span class="keyword">return</span> node[<span class="number">1</span>][root];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)</span><br><span class="line">        ans = <span class="built_in">min</span>(QueryMin(root&lt;&lt;<span class="number">1</span>, l, mid, L, R), ans);</span><br><span class="line">    <span class="keyword">if</span>(R &gt; mid)</span><br><span class="line">        ans = <span class="built_in">min</span>(QueryMin(root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, L, R), ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    per[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">        per[i] = per[i - <span class="number">1</span>] + b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//建树 区间为[0, n] 因为第一个值为 per[1] - per[0]</span></span><br><span class="line">    BuildTree(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">    <span class="comment">//记录L[i]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(st.<span class="built_in">size</span>() &amp;&amp; a[st.top()] &gt;= a[i]) st.pop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(st.<span class="built_in">size</span>() == <span class="number">0</span>) l[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> l[i] = st.top();</span><br><span class="line"></span><br><span class="line">        st.push(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(st.<span class="built_in">size</span>()) st.pop();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录R[i]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(st.<span class="built_in">size</span>() &amp;&amp; a[st.top()] &gt;= a[i]) st.pop();</span><br><span class="line">        <span class="keyword">if</span>(st.<span class="built_in">size</span>() == <span class="number">0</span>) r[i] = n;</span><br><span class="line">        <span class="keyword">else</span> r[i] = st.top() - <span class="number">1</span>;</span><br><span class="line">        st.push(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">-1e18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, (QueryMax(<span class="number">1</span>, <span class="number">0</span>, n, i, r[i]) - QueryMin(<span class="number">1</span>, <span class="number">0</span>, n, l[i], i - <span class="number">1</span>)) * a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, (QueryMin(<span class="number">1</span>, <span class="number">0</span>, n, i, r[i]) - QueryMax(<span class="number">1</span>, <span class="number">0</span>, n, l[i], i - <span class="number">1</span>)) * a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>2019牛客暑期多校训练营</category>
      </categories>
      <tags>
        <tag>牛客</tag>
        <tag>单调栈</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客暑期多校训练营(第一场场)_I题Points Division(线段树+DP维护区间最大值)</title>
    <url>/2019/08/20/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E4%B8%80%E5%9C%BA%E5%9C%BA-I%E9%A2%98Points-Division-%E7%BA%BF%E6%AE%B5%E6%A0%91-DP%E7%BB%B4%E6%8A%A4%E5%8C%BA%E9%97%B4%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
    <content><![CDATA[<h3 id="题目链接-https-ac-nowcoder-com-acm-contest-881-I"><a href="#题目链接-https-ac-nowcoder-com-acm-contest-881-I" class="headerlink" title="题目链接: https://ac.nowcoder.com/acm/contest/881/I"></a>题目链接: <a href="https://ac.nowcoder.com/acm/contest/881/I" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/881/I</a></h3><p>题意： 给你n个点，每个点的坐标为(xi,yi)，有两个权值ai,bi。<br>现在要你将它分成A,B两部分，使得在满足“A的点不能落在在B的点的右下方”的条件下∑i∈Aai+∑j∈Bbj最大。</p>
<h3 id="思路：可以参考一下大佬的博客"><a href="#思路：可以参考一下大佬的博客" class="headerlink" title="思路：可以参考一下大佬的博客"></a>思路：可以参考一下大佬的博客</h3><ul>
<li><a href="https://www.cnblogs.com/buerdepepeqi/p/11231875.html" target="_blank" rel="noopener">https://www.cnblogs.com/buerdepepeqi/p/11231875.html</a></li>
<li><a href="https://blog.csdn.net/u013534123/article/details/96465704" target="_blank" rel="noopener">https://blog.csdn.net/u013534123/article/details/96465704</a></li>
<li><a href="https://www.cnblogs.com/Dillonh/p/11216839.html" target="_blank" rel="noopener">https://www.cnblogs.com/Dillonh/p/11216839.html</a></li>
</ul>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><p>下午的时候，看了大佬写的博文，也按着他的思路自己敲了一遍，后面发现自己忘记开long long 就索性全文替换了，改完之后再交发现还是没过，emmmmmm(只通过0.01%的样例),  晚上突然一想到，我去，忘记初始化lazy了，哎……</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> node[MAXN&lt;&lt;<span class="number">2</span>], lazy[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[root] = <span class="built_in">max</span>(node[root&lt;&lt;<span class="number">1</span>], node[root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> root, <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        node[root] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//lazy 也要初始化，否则会有遗留</span></span><br><span class="line">	lazy[root] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    BuildTree(root&lt;&lt;<span class="number">1</span>, l, mid);</span><br><span class="line">    BuildTree(root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line">    PushUp(root);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> root, <span class="keyword">long</span> <span class="keyword">long</span> ln, <span class="keyword">long</span> <span class="keyword">long</span> rn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(lazy[root])&#123;</span><br><span class="line"></span><br><span class="line">        lazy[root&lt;&lt;<span class="number">1</span>] += lazy[root];</span><br><span class="line">        lazy[root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += lazy[root];</span><br><span class="line"></span><br><span class="line">        node[root&lt;&lt;<span class="number">1</span>] += lazy[root];</span><br><span class="line">        node[root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += lazy[root];</span><br><span class="line"></span><br><span class="line">        lazy[root] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> root, <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r, <span class="keyword">long</span> <span class="keyword">long</span> index, <span class="keyword">long</span> <span class="keyword">long</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        node[root] = value;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    PushDown(root, mid - l + <span class="number">1</span>, r - mid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(index &lt;= mid)</span><br><span class="line">        Update(root&lt;&lt;<span class="number">1</span>, l, mid, index, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        Update(root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, index, value);</span><br><span class="line"></span><br><span class="line">    PushUp(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> root, <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r, <span class="keyword">long</span> <span class="keyword">long</span> L, <span class="keyword">long</span> <span class="keyword">long</span> R, <span class="keyword">long</span> <span class="keyword">long</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"></span><br><span class="line">        node[root] += value;</span><br><span class="line">        lazy[root] += value;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    PushDown(root, mid - l + <span class="number">1</span>, r - mid);</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)</span><br><span class="line">        Update(root&lt;&lt;<span class="number">1</span>, l, mid, L, R, value);</span><br><span class="line">    <span class="keyword">if</span>(R &gt; mid)</span><br><span class="line">        Update(root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, value);</span><br><span class="line"></span><br><span class="line">    PushUp(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Query</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> root, <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r, <span class="keyword">long</span> <span class="keyword">long</span> L, <span class="keyword">long</span> <span class="keyword">long</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node[root];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    PushDown(root, mid - l + <span class="number">1</span>, r - mid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, Query(root&lt;&lt;<span class="number">1</span>, l, mid, L, R));</span><br><span class="line">    <span class="keyword">if</span>(R &gt; mid)</span><br><span class="line">        ans = <span class="built_in">max</span>(Query(root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, L, R), ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">p</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> y;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> p as, p bs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (as.x == bs.x) ? as.y &gt; bs.y : as.x &lt; bs.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">long long cmp(p as, p bs)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    return (as.x == bs.x) ? as.y &gt; bs.y : as.x &lt; bs.x;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;p&gt; nodeVe;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; nVe;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x, y, a, b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            nodeVe.push_back(p&#123;x, y, a, b&#125;);</span><br><span class="line">            nVe.push_back(y);           <span class="comment">//存在y, 后面对其进行离散化</span></span><br><span class="line">        &#125;</span><br><span class="line">        sort(nVe.<span class="built_in">begin</span>(), nVe.<span class="built_in">end</span>());</span><br><span class="line">        nVe.erase(unique(nVe.<span class="built_in">begin</span>(), nVe.<span class="built_in">end</span>()), nVe.<span class="built_in">end</span>());</span><br><span class="line">        <span class="comment">//对Y进行离散化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            nodeVe[i].y = lower_bound(nVe.<span class="built_in">begin</span>(), nVe.<span class="built_in">end</span>(), nodeVe[i].y) - nVe.<span class="built_in">begin</span>() + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sort(nodeVe.begin(), nodeVe.end(), cmp);</span></span><br><span class="line">        sort(nodeVe.<span class="built_in">begin</span>(), nodeVe.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//建树，并初始化0，</span></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> nTreeSize = nVe.<span class="built_in">size</span>();</span><br><span class="line">        BuildTree(<span class="number">1</span>, <span class="number">0</span>, nTreeSize);     <span class="comment">// 因为我们是y来进行dp, 所以树的大小就是nVe.size();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//维护区间最值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="comment">//修改这个点贡献即 dp[i]</span></span><br><span class="line">            Update(<span class="number">1</span>, <span class="number">0</span>, nTreeSize, nodeVe[i].y, Query(<span class="number">1</span>, <span class="number">0</span>, nTreeSize, <span class="number">0</span>, nodeVe[i].y) + nodeVe[i].b);</span><br><span class="line">            <span class="comment">//更新左子树，右子树</span></span><br><span class="line">            <span class="keyword">if</span>(nodeVe[i].y - <span class="number">1</span> &gt;= <span class="number">0</span>) Update(<span class="number">1</span>, <span class="number">0</span>, nTreeSize, <span class="number">0</span>, nodeVe[i].y - <span class="number">1</span>, nodeVe[i].a);</span><br><span class="line">            <span class="keyword">if</span>(nodeVe[i].y + <span class="number">1</span> &lt;= nTreeSize) Update(<span class="number">1</span>, <span class="number">0</span>, nTreeSize, nodeVe[i].y + <span class="number">1</span>, nTreeSize, nodeVe[i].b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; node[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注释我按着自己的理解写的，如有误，可以指出，谢谢！"><a href="#注释我按着自己的理解写的，如有误，可以指出，谢谢！" class="headerlink" title="注释我按着自己的理解写的，如有误，可以指出，谢谢！"></a>注释我按着自己的理解写的，如有误，可以指出，谢谢！</h3>]]></content>
      <categories>
        <category>2019牛客暑期多校训练营</category>
      </categories>
      <tags>
        <tag>牛客</tag>
        <tag>DP</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客暑期多校训练营(第十场场)_B题Coffee Chicken</title>
    <url>/2019/08/20/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E5%8D%81%E5%9C%BA%E5%9C%BA-B%E9%A2%98Coffee-Chicken/</url>
    <content><![CDATA[<h3 id="题目链接-https-ac-nowcoder-com-acm-contest-890-B"><a href="#题目链接-https-ac-nowcoder-com-acm-contest-890-B" class="headerlink" title="题目链接: https://ac.nowcoder.com/acm/contest/890/B"></a>题目链接: <a href="https://ac.nowcoder.com/acm/contest/890/B" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/890/B</a></h3><p>这道题，原本没什么思路，但听队友一提类似斐波那契数列，emmmmm，我看了一篇博客(也是关于斐波那契字符串的题目)，突然就知道怎么写了(博客:<a href="https://blog.csdn.net/weixin_44405344/article/details/88379483" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44405344/article/details/88379483</a>)</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>第n个字符串，它的前一半是第n - 2 个字符串, 后一半是第n - 1个字符串，而我们要找的是[k, k + 9] 这一段字符串, 所以我们知道有三种情况 ：</p>
<ul>
<li>这段字符串全在第n-2个字符串中</li>
<li>这段字符串全在第n-1个字符串中</li>
<li>一部分在第n-2个字符串中，反之另一部分在n-1中]</li>
</ul>
<p>所以我们可以递归一直往前推，最终从第一个，第二个字符串中找到我们要找的字符串</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> len[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s[<span class="number">1</span>] = <span class="string">"COFFEE"</span>;</span><br><span class="line">    s[<span class="number">2</span>] = <span class="string">"CHICKEN"</span>;</span><br><span class="line">    <span class="comment">//预处理好1-57, 字符串的长度</span></span><br><span class="line">    len[<span class="number">1</span>] = <span class="number">6</span>;</span><br><span class="line">    len[<span class="number">2</span>] = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">57</span>; i++)&#123;</span><br><span class="line">        len[i] = len[i - <span class="number">1</span>] + len[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s[n].substr(l - <span class="number">1</span>, (r - l + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(len[n - <span class="number">2</span>] &gt; r)&#123;</span><br><span class="line">        f(n - <span class="number">2</span>, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(len[n - <span class="number">2</span>] &lt; l)&#123;</span><br><span class="line">        f(n - <span class="number">1</span>, l - len[n - <span class="number">2</span>], r - len[n - <span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        f(n - <span class="number">2</span>, l, len[n - <span class="number">2</span>]);</span><br><span class="line">        f(n - <span class="number">1</span>, <span class="number">1</span>, r - len[n - <span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">int</span> m;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; k;</span><br><span class="line">            <span class="keyword">if</span>(m &gt;= <span class="number">56</span>)&#123;</span><br><span class="line">                <span class="comment">// 大于等于56时, k == 1e12</span></span><br><span class="line">                <span class="comment">//奇数项和偶数项开头不一样</span></span><br><span class="line">                <span class="keyword">if</span>(m % <span class="number">2</span>) m = <span class="number">57</span>;</span><br><span class="line">                <span class="keyword">else</span> m = <span class="number">56</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            f(m, k, k + <span class="number">9</span>);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>2019牛客暑期多校训练营</category>
      </categories>
      <tags>
        <tag>牛客</tag>
        <tag>斐波那契</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树模板+模板题(HDU1166)</title>
    <url>/2019/08/20/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF-%E6%A8%A1%E6%9D%BF%E9%A2%98-HDU1166/</url>
    <content><![CDATA[<h3 id="题目链接-http-acm-hdu-edu-cn-showproblem-php-pid-1166"><a href="#题目链接-http-acm-hdu-edu-cn-showproblem-php-pid-1166" class="headerlink" title="题目链接:  http://acm.hdu.edu.cn/showproblem.php?pid=1166"></a>题目链接: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1166" target="_blank" rel="noopener"> http://acm.hdu.edu.cn/showproblem.php?pid=1166</a></h3><p>原来都是用的别人的模板, 这次自己又重新看了一遍线段树(基础), 重新回顾了一遍, 敲了一遍模板<br>模板的注释写的蛮详细的, 这里就不讲解线段树了, emmmm</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>用了懒标记效率会提升很多!!</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> node[MAXN&lt;&lt;<span class="number">2</span>], lazy[MAXN&lt;&lt;<span class="number">2</span>];<span class="comment">//为什么空间要开节点的4倍 请移步至:https://blog.csdn.net/liqiming100/article/details/82319686</span></span><br><span class="line"><span class="keyword">int</span> num[MAXN];</span><br><span class="line"><span class="comment">//线段树模板(以区间和为例)</span></span><br><span class="line"><span class="comment">//更新数据</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[root] = node[root&lt;&lt;<span class="number">1</span>] + node[root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.建树</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span>     <span class="comment">//[l,r]当前节点的区间, root 当前节点的编号</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        <span class="comment">//说明当前已经到达叶子节点</span></span><br><span class="line">        node[root] = num[l];    <span class="comment">//建树先左后右</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//继续递归建树</span></span><br><span class="line">    BuildTree(root&lt;&lt;<span class="number">1</span>, l, mid);<span class="comment">//左</span></span><br><span class="line">    BuildTree(root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r);<span class="comment">//右</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他操作(例如更新区间和)</span></span><br><span class="line">    PushUp(root);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.单点修改</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> index, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// root 当前节点编号 [l,r] 树的区间范围, index 修改的节点编号, value 修改的值</span></span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        <span class="comment">//到达当前节点</span></span><br><span class="line">        node[root] += value;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(index &lt;= mid)</span><br><span class="line">        Update(root&lt;&lt;<span class="number">1</span>, l, mid, index, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        Update(root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, index, value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改后记得更新</span></span><br><span class="line">    PushUp(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.区间修改</span></span><br><span class="line"><span class="comment">//区间修改为了优化效率，我们引入'懒标记' lazy, 所以我们需要一个向下推(向叶节点更新的函数)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> ln, <span class="keyword">int</span> rn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// root 当前节点编号, ln 左子树节点个数, rn 右子树节点个数</span></span><br><span class="line">    <span class="keyword">if</span>(lazy[root])&#123;</span><br><span class="line">        <span class="comment">//为什么是加上而不是直接赋值, 可能存在连续的进行区间修改</span></span><br><span class="line">        lazy[root&lt;&lt;<span class="number">1</span>] += lazy[root];</span><br><span class="line">        lazy[root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += lazy[root];</span><br><span class="line">        <span class="comment">//更新结果</span></span><br><span class="line">        node[root&lt;&lt;<span class="number">1</span>] += lazy[root] * ln;</span><br><span class="line">        node[root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += lazy[root] * rn;</span><br><span class="line">        <span class="comment">//清除标记</span></span><br><span class="line">        lazy[root] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// root 当前节点的编号, [l,r] 线段树区间, [L,R] 需要修改的区间范围 , value 修改的值</span></span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">        <span class="comment">//说明在修改的区间范围</span></span><br><span class="line">        node[root] += (value * (r - l + <span class="number">1</span>));        <span class="comment">//直接修改这个节点的值(得到当前区间正确的值)</span></span><br><span class="line">        lazy[root] += value;                        <span class="comment">//下面的节点值用lazy来修改</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//下推lazy</span></span><br><span class="line">    PushDown(root, mid - l + <span class="number">1</span>, r - mid);</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)</span><br><span class="line">        Update(root&lt;&lt;<span class="number">1</span>, l, mid, L, R, value);</span><br><span class="line">    <span class="keyword">if</span>(R &gt; mid)</span><br><span class="line">        Update(root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新</span></span><br><span class="line">    PushUp(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.区间查询</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// root 当前节点的编号, [l,r] 线段树区间, [L,R] 需要修改的区间范围</span></span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">        <span class="comment">//当前区间在查询区间内, 直接返回节点值</span></span><br><span class="line">        <span class="keyword">return</span> node[root];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//下推lazy</span></span><br><span class="line">    PushDown(root, mid - l + <span class="number">1</span>, r - mid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)</span><br><span class="line">        ans += Query(root&lt;&lt;<span class="number">1</span>, l, mid, L, R);</span><br><span class="line">    <span class="keyword">if</span>(R &gt; mid)</span><br><span class="line">        ans += Query(root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, L, R);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; t)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; i &lt;&lt; <span class="string">":"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; num[j];</span><br><span class="line">            &#125;</span><br><span class="line">            BuildTree(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s &amp;&amp; s != <span class="string">"End"</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s == <span class="string">"Query"</span>)&#123;</span><br><span class="line">                    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; Query(<span class="number">1</span>, <span class="number">1</span>, n, a, b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">"Add"</span>)&#123;</span><br><span class="line">                    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">                    Update(<span class="number">1</span>, <span class="number">1</span>, n, a, b);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">"Sub"</span>)&#123;</span><br><span class="line">                    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">                    Update(<span class="number">1</span>, <span class="number">1</span>, n, a, -b);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="线段树还有好多应用，看来路还很长啊！！"><a href="#线段树还有好多应用，看来路还很长啊！！" class="headerlink" title="线段树还有好多应用，看来路还很长啊！！"></a>线段树还有好多应用，看来路还很长啊！！</h3>]]></content>
      <categories>
        <category>HDU</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>HDU</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客暑期多校训练营(第二场场)_H题Second Large Rectangle</title>
    <url>/2019/08/07/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E4%BA%8C%E5%9C%BA%E5%9C%BA-H%E9%A2%98Second-Large-Rectangle/</url>
    <content><![CDATA[<h3 id="题目链接-https-ac-nowcoder-com-acm-contest-882-H"><a href="#题目链接-https-ac-nowcoder-com-acm-contest-882-H" class="headerlink" title="题目链接: https://ac.nowcoder.com/acm/contest/882/H"></a>题目链接: <a href="https://ac.nowcoder.com/acm/contest/882/H" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/882/H</a></h3><p>思路:(转载自: <a href="https://www.cnblogs.com/pisceskkk/p/11229105.html" target="_blank" rel="noopener">https://www.cnblogs.com/pisceskkk/p/11229105.html</a>)<br>首先考虑求最大矩形：</p>
<p>不妨考虑以第i行为底边的矩形，那么就转化成直方图求最大矩形面积。</p>
<p>如图<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTYwNTg3NC8yMDE5MDcvMTYwNTg3NC0yMDE5MDcyMjIzMjAxOTM2Ny0xNzgwOTI1ODM3LnBuZw" alt="在这里插入图片描述"><br>当我们遇到第三列时，第二列的高度已经不能拓展，因此将其清算掉，同时将第三列高度加入栈中。</p>
<p>即使用单调栈维护所有高度中最靠右且小于当前高度的位置（注意单调）。</p>
<p>进而考虑求第二大，情况有二，所有完整的尽量大的矩形中第二大，或者尽量大的矩形去掉一行或者一列。由于我们按行以此求解，只需要额外考虑去掉一列的情况就OK。</p>
<h3 id="单调栈的一道经典题"><a href="#单调栈的一道经典题" class="headerlink" title="单调栈的一道经典题"></a>单调栈的一道经典题</h3><p>力扣: 柱状图中最大的矩形: <a href="https://leetcode-cn.com/problems/largest-rectangle-in-histogram/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/largest-rectangle-in-histogram/</a><br>同样也是用单调栈去维护一个非递减序列</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> mp[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line">        <span class="keyword">int</span> maxn = <span class="number">0</span>, minn = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">            sum[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                mp[i][j] = (s[j - <span class="number">1</span>] - <span class="string">'0'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mp[i][m + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">            <span class="keyword">int</span> ans;</span><br><span class="line">            st.push(<span class="number">0</span>); <span class="comment">// 设置矩形的坐界限</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j =  <span class="number">1</span>; j &lt;= m + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                sum[j] = (mp[i][j] == <span class="number">1</span> ? sum[j] + <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">while</span>(st.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; sum[j] &lt;= sum[st.top()])&#123;</span><br><span class="line">                    <span class="keyword">int</span> k = st.top();</span><br><span class="line">                    st.pop();</span><br><span class="line">                    ans = sum[k] * ((j - <span class="number">1</span>) - st.top());  <span class="comment">// 宽 * 底面长</span></span><br><span class="line">                    <span class="keyword">if</span>(ans &gt; maxn)&#123;</span><br><span class="line">                        minn = maxn;</span><br><span class="line">                        maxn = ans;</span><br><span class="line">                        ans -= sum[k]; 		<span class="comment">//因为我们求的第二大 所以我们要尝试去掉一行或者一列再去与第二大做比较, 因为我们是按行来求解的所以我们只要尝试去掉一列即可， 即宽 * （底面长 - 1)</span></span><br><span class="line">                        <span class="keyword">if</span>(ans &gt; minn)&#123;</span><br><span class="line">                            minn = ans;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(ans &gt; minn)&#123;</span><br><span class="line">                        minn = ans;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                st.push(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; minn &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>2019牛客暑期多校训练营</category>
      </categories>
      <tags>
        <tag>牛客</tag>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客暑期多校训练营(第二场场)_F题Partition problem</title>
    <url>/2019/08/02/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E4%BA%8C%E5%9C%BA%E5%9C%BA-F%E9%A2%98Partition-problem/</url>
    <content><![CDATA[<h3 id="题目链接-https-ac-nowcoder-com-acm-contest-882-F"><a href="#题目链接-https-ac-nowcoder-com-acm-contest-882-F" class="headerlink" title="题目链接: https://ac.nowcoder.com/acm/contest/882/F"></a>题目链接: <a href="https://ac.nowcoder.com/acm/contest/882/F" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/882/F</a></h3><p>因为看到数据也小，所以当时比赛的时候我们也尝试了爆搜，但是，T了，主要在于搜完了才去统计……</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mp[MAXN][MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[MAXN], b[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now, ll sum, <span class="keyword">int</span> suma, <span class="keyword">int</span> sumb)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(now &gt; (<span class="number">2</span> * n) + <span class="number">1</span>)&#123;<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">if</span>(suma == n &amp;&amp; sumb == n)&#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, sum);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(suma &lt; n)&#123;</span><br><span class="line">        a[suma + <span class="number">1</span>] = now;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= sumb; j++)&#123;</span><br><span class="line">            sum += mp[now][b[j]];</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(now + <span class="number">1</span>, sum, suma + <span class="number">1</span>, sumb);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= sumb; j++)&#123;</span><br><span class="line">            sum -= mp[now][b[j]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sumb &lt; n)&#123;</span><br><span class="line">        b[sumb + <span class="number">1</span>] = now;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= suma; j++)&#123;</span><br><span class="line">            sum += mp[now][a[j]];</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(now + <span class="number">1</span>, sum, suma, sumb + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= suma; j++)&#123;</span><br><span class="line">            sum -= mp[now][a[j]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2</span> * n; j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; mp[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="number">-1</span>;</span><br><span class="line">        dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>2019牛客暑期多校训练营</category>
      </categories>
      <tags>
        <tag>牛客</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客暑期多校训练营(第一场场)_E题ABBA(DP + 贪心)</title>
    <url>/2019/07/30/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E4%B8%80%E5%9C%BA%E5%9C%BA-E%E9%A2%98ABBA-DP-%E8%B4%AA%E5%BF%83/</url>
    <content><![CDATA[<h3 id="题目链接：-https-ac-nowcoder-com-acm-contest-881-E"><a href="#题目链接：-https-ac-nowcoder-com-acm-contest-881-E" class="headerlink" title="题目链接： https://ac.nowcoder.com/acm/contest/881/E"></a>题目链接： <a href="https://ac.nowcoder.com/acm/contest/881/E" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/881/E</a></h3><p>题意: 问你长度为2 * （n+m）的字符串由（n+m）个A和B组成，要求有n个AB子序列和m个BA子序列，这样的串有几个</p>
<p>思路: 假设有一个合法串，因为子序列n个AB和m个BA，那么显然有前n个A必为AB的A，前m个B必为BA的B。因为如果我前n个A中有一个是BA的A，那我是不是可以从更后面随便找一个A给这个B用，那么显然前n个A必为AB的A。</p>
<p>我们假设DP[i][j]为i个A,j个B，放A：</p>
<p>如果i &lt; n那么可以直接放这个A，理由如上</p>
<p>如果i &gt;= n，那么我们要确保这个A能给前面的B当BA用，那么当前BA需要的A是min(j, m)个，已经给他了i - n个，故(i - n) &lt; min(j, m)则还可以继续放。<br>同理， m 也是一样的！</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n + m; ++j)&#123;</span><br><span class="line">                dp[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n + m; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i &lt; n || (i - n) &lt; <span class="built_in">min</span>(j, m))&#123;</span><br><span class="line">                    dp[i + <span class="number">1</span>][j] = (dp[i + <span class="number">1</span>][j] + dp[i][j]) % MOD;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j &lt; m || (j - m) &lt; <span class="built_in">min</span>(i, n))&#123;</span><br><span class="line">                    dp[i][j + <span class="number">1</span>] = (dp[i][j + <span class="number">1</span>] + dp[i][j]) % MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dp[n + m][n + m] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>2019牛客暑期多校训练营</category>
      </categories>
      <tags>
        <tag>牛客</tag>
        <tag>DP</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客暑期多校训练营(第一场场)_A题Equivalent Prefixes</title>
    <url>/2019/07/30/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5-%E7%AC%AC%E4%B8%80%E5%9C%BA%E5%9C%BA-A%E9%A2%98Equivalent-Prefixes/</url>
    <content><![CDATA[<h3 id="题目链接-https-ac-nowcoder-com-acm-contest-881-A"><a href="#题目链接-https-ac-nowcoder-com-acm-contest-881-A" class="headerlink" title="题目链接: https://ac.nowcoder.com/acm/contest/881/A"></a>题目链接: <a href="https://ac.nowcoder.com/acm/contest/881/A" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/881/A</a></h3><p>题意: 求一个最大p使得，在区间[1, p] 内的所有区间 a 序列 和 b序列的最小值下标相同</p>
<p>思路: 用单调栈来维护单调递增序列！如果两个栈大小不同, 那么两个序列就是不等价的，因为题目要是的所有区间的最小值下表都相等!</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> k;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">            a.push_back(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> k;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">            b.push_back(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; aa, bb;</span><br><span class="line">        <span class="keyword">int</span> ans = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(aa.<span class="built_in">size</span>() &amp;&amp; a[i] &lt; aa.top())&#123;</span><br><span class="line">                aa.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(bb.<span class="built_in">size</span>() &amp;&amp; b[i] &lt; bb.top())&#123;</span><br><span class="line">                bb.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            aa.push(a[i]);</span><br><span class="line">            bb.push(b[i]);</span><br><span class="line">            <span class="keyword">if</span>(aa.<span class="built_in">size</span>() != bb.<span class="built_in">size</span>())&#123;</span><br><span class="line">                ans = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>2019牛客暑期多校训练营</category>
      </categories>
      <tags>
        <tag>牛客</tag>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title>马拉车算法(求最长回文串)</title>
    <url>/2019/07/26/%E9%A9%AC%E6%8B%89%E8%BD%A6%E7%AE%97%E6%B3%95-%E6%B1%82%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2/</url>
    <content><![CDATA[<h3 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h3><ul>
<li><p><a href="https://blog.csdn.net/qq_43456058/article/details/9458872" target="_blank" rel="noopener">https://blog.csdn.net/qq_43456058/article/details/9458872</a></p>
</li>
<li><p><a href="https://blog.csdn.net/u011469138/article/details/82431327" target="_blank" rel="noopener">https://blog.csdn.net/u011469138/article/details/82431327</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_40620465/article/details/90183663?utm_source=app" target="_blank" rel="noopener">https://blog.csdn.net/qq_40620465/article/details/90183663?utm_source=app</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/grandyang/p/4475985.html" target="_blank" rel="noopener">https://www.cnblogs.com/grandyang/p/4475985.html</a></p>
<h3 id="马拉车算法"><a href="#马拉车算法" class="headerlink" title="马拉车算法:"></a>马拉车算法:</h3></li>
<li><p>什么是马拉车?<br>Manacher算法，又叫“马拉车”，它可以在时间复杂度和空间复杂度都是O(n)的情况下，求出一个字符串的最长回文串长度(一般用法,也可以求字符串中回文串的个数)</p>
<ul>
<li>第一步，重组字符串<br>例如: noon<br>重组后:$#n#o#o#n#<br>那为什么要这样做呢?</li>
</ul>
<p>1.首先,这样做的好处是不论原字符串是奇数还是偶数个，处理之后得到的字符串的个数都是奇数个，这样就不用分情况讨论了，而可以一起搞定。<br>2.接下来我们还需要和处理后的字符串t等长的数组p，其中 p[i] 表示以 t[i] 字符为中心的回文子串的半径，若 p[i] = 1，则该回文子串就是 t[i] 本身，那么我们来看一个简单的例子：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 1 # 2 # 2 # 1 # 2 # 2 #</span><br><span class="line">1 2 1 2 5 2 1 6 1 2 3 2 1</span><br></pre></td></tr></table></figure>
<p> 为啥我们关心回文子串的半径呢？看上面那个例子，以中间的 ‘1’ 为中心的回文子串 “#2#2#1#2#2#” 的半径是6，而未添加#号的回文子串为 “22122”，长度是5，为半径减1。这是个普遍的规律么？我们再看看之前的那个 “#b#o#b#”，我们很容易看出来以中间的 ‘o’ 为中心的回文串的半径是4，而 “bob”的长度是3，符合规律。再来看偶数个的情况 “noon”，添加#号后的回文串为 “#n#o#o#n#”，以最中间的 ‘#’ 为中心的回文串的半径是5，而 “noon” 的长度是4，完美符合规律。所以我们只要找到了最大的半径，就知道最长的回文子串的字符个数了。只知道长度无法定位子串，我们还需要知道子串的起始位置。<br> 我们还是先来看中间的 ‘1’ 在字符串 “#1#2#2#1#2#2#” 中的位置是7，而半径是6，貌似 7-6=1，刚好就是回文子串 “22122” 在原串 “122122” 中的起始位置1。那么我们再来验证下 “bob”，”o” 在 “#b#o#b#” 中的位置是3，但是半径是4，这一减成负的了，肯定不对。所以我们应该至少把中心位置向后移动一位，才能为0啊，那么我们就需要在前面增加一个字符，这个字符不能是#号，也不能是s中可能出现的字符，所以我们暂且就用美元号$吧，毕竟是博主最爱的东西嘛。这样都不相同的话就不会改变p值了，那么末尾要不要对应的也添加呢，其实不用的，不用加的原因是字符串的结尾标识为 ‘\0’，等于默认加过了。那此时 “o” 在 “$#b#o#b#” 中的位置是4，半径是4，一减就是0了，貌似没啥问题。我们再来验证一下那个数字串，中间的 ‘1’ 在字符串 “$#1#2#2#1#2#2#” 中的位置是8，而半径是6，这一减就是2了，而我们需要的是1，所以我们要除以2。之前的 “bob” 因为相减已经是0了，除以2还是0，没有问题。再来验证一下 “noon”，中间的 ‘#’ 在字符串 “$#n#o#o#n#” 中的位置是5，半径也是5，相减并除以2还是0，完美。可以任意试试其他的例子，都是符合这个规律的，最长子串的长度是半径减1，起始位置是中间位置减去半径再除以2。(此处偷了懒,复制了其他博客!如有侵权，请联系删除!抱歉!)</p>
<ul>
<li>第二步，理解下面这段代码<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// id 代表中心位置， mx 代表最右边的位置</span></span><br><span class="line">p[i] = mx &gt; i ? <span class="built_in">min</span>(p[id * <span class="number">2</span> - i],mx - i):<span class="number">1</span>;</span><br></pre></td></tr></table></figure>
看上去不是很好理解，下面开始分步讲解<br>首先对数据进行初始化，再对i进行判断，分为两种情况<br>第一种情况，i&gt;=mx,i在mx前面，直接让p[i]=1。<br>第二种情况，i&lt;mx，这时候就又有两种情况了，对p[j]和mx-i进行比较：<br>（1）p[j]&lt;=mx-i说明i的最右端还在mx里面，如上图所示，只需要让p[i]=p[j]即可。<br>（2）p[j]&gt;mx说明i的最右端大于mx了，如下图所示，所以我们需要对这两种情况再讨论一下，当p[j] &lt; mx-i的时候，表示Len[i]的长度可能不会超过mx-i，所以我们就从i的p[2*id - i]也就是p[mx-i]的地方开始匹配。当p[j] &gt; mx - i的时候，说明i位置的子串长度超过了mx，但mx以外的地方还没有遍历到，所以我们就从mx-i也就是mx的位置开始对i匹配。<br>如果p[i]+i&gt;mx，就对mx进行更新，并且将中间点id更换成i，再通过比较更新最长回文串长度，返回最大值。</li>
</ul>
</li>
</ul>
<ul>
<li><p>马拉车完整代码(求最长回文子串的长度):</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">马拉车模板题: https://www.luogu.org/problemnew/solution/P3805</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//求最长回文串的长度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">32000005</span>;</span><br><span class="line"><span class="keyword">int</span> hw[MAXN];</span><br><span class="line"><span class="comment">//马拉车</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Manacher</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//转换字符串</span></span><br><span class="line">    <span class="built_in">memset</span>(hw, <span class="number">0</span>, <span class="keyword">sizeof</span>(hw));</span><br><span class="line">    <span class="keyword">int</span> len = s.length();</span><br><span class="line">    <span class="built_in">string</span> nowString = <span class="string">"$#"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        nowString += s[i];</span><br><span class="line">        nowString += <span class="string">"#"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//防止越界访问</span></span><br><span class="line">    len = nowString.length();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxRight = <span class="number">0</span>, mid = <span class="number">0</span>, maxAns = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//maxRight 最右边的位置 mid 中心的位置 maxAns 最长回文串的半径</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(maxRight &gt; i)&#123;</span><br><span class="line">            <span class="comment">//当中心点没超过最右边maxRight</span></span><br><span class="line">            hw[i] = <span class="built_in">min</span>(maxRight - i, hw[(mid&lt;&lt;<span class="number">1</span>) - i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//否则,就重新往外扩</span></span><br><span class="line">            hw[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果当前不是最长, 就往外扩</span></span><br><span class="line">        <span class="keyword">while</span>(nowString[i + hw[i]] == nowString[i - hw[i]])&#123;</span><br><span class="line">            ++hw[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新最右边的位置, 同时更新最长字串的半径</span></span><br><span class="line">        <span class="keyword">if</span>(i + hw[i] &gt; maxRight)&#123;</span><br><span class="line">            maxRight = i + hw[i];</span><br><span class="line">            mid = i;</span><br><span class="line">        &#125;</span><br><span class="line">        maxAns = <span class="built_in">max</span>(hw[i], maxAns);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最长字串的长度等于半径减1</span></span><br><span class="line">    <span class="keyword">return</span> (maxAns - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; Manacher(s) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>马拉车求最长回文串的个数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求回文串的个数</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Manacher</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//转换字符串</span></span><br><span class="line">    <span class="built_in">memset</span>(hw, <span class="number">0</span>, <span class="keyword">sizeof</span>(hw));</span><br><span class="line">    <span class="keyword">int</span> len = s.length();</span><br><span class="line">    <span class="built_in">string</span> nowString = <span class="string">"$#"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        nowString += s[i];</span><br><span class="line">        nowString += <span class="string">"#"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//防止越界访问</span></span><br><span class="line">    nowString += <span class="string">"^"</span>;</span><br><span class="line">    len = nowString.length();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxRight = <span class="number">0</span>, mid = <span class="number">0</span>, maxAns = <span class="number">0</span>, numAns = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//maxRight 最右边的位置 mid 中心的位置 maxAns 最长回文串的半径</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(maxRight &gt; i)&#123;</span><br><span class="line">            <span class="comment">//当中心点没超过最右边maxRight</span></span><br><span class="line">            hw[i] = <span class="built_in">min</span>(maxRight - i, hw[(mid&lt;&lt;<span class="number">1</span>) - i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//否则,就重新往外扩</span></span><br><span class="line">            hw[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果当前不是最长, 就往外扩</span></span><br><span class="line">        <span class="keyword">while</span>(nowString[i + hw[i]] == nowString[i - hw[i]])&#123;</span><br><span class="line">            ++hw[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新最右边的位置, 同时更新最长字串的半径</span></span><br><span class="line">        <span class="keyword">if</span>(i + hw[i] &gt; maxRight)&#123;</span><br><span class="line">            maxRight = i + hw[i];</span><br><span class="line">            mid = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//求最长回文串的长度</span></span><br><span class="line">        <span class="comment">//maxAns = max(hw[i], maxAns);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//求回文串的个数</span></span><br><span class="line">        numAns += (hw[i] / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最长字串的长度等于半径减1</span></span><br><span class="line">    <span class="comment">//return (maxAns - 1);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//回文串的个数</span></span><br><span class="line">    <span class="keyword">return</span> numAns;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我们来探讨下为什么是:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求回文串的个数</span></span><br><span class="line">numAns += (hw[i] / <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>例如:<br>#a#b#a#<br>1 2 1 4 1 2 1<br>这已经给出了每个字符所能延伸的半径, 例如b为4,因为这之内的所有字符都是以b字符为中心对称,又因为字符串中加入了#字符,所以以b字符为中心点的回文串个数为hw[b的下标] / 2</p>
</li>
<li><p>求最长回文串</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求最长回文串</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">Manacher</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//转换字符串</span></span><br><span class="line">    <span class="built_in">memset</span>(hw, <span class="number">0</span>, <span class="keyword">sizeof</span>(hw));</span><br><span class="line">    <span class="keyword">int</span> len = s.length();</span><br><span class="line">    <span class="built_in">string</span> nowString = <span class="string">"$#"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        nowString += s[i];</span><br><span class="line">        nowString += <span class="string">"#"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//防止越界访问</span></span><br><span class="line">    nowString += <span class="string">"^"</span>;</span><br><span class="line">    len = nowString.length();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxRight = <span class="number">0</span>, mid = <span class="number">0</span>, maxLen = <span class="number">0</span>, maxPoint = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//maxRight 最右边的位置 mid 中心的位置 maxAns 最长回文串的半径</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(maxRight &gt; i)&#123;</span><br><span class="line">            <span class="comment">//当中心点没超过最右边maxRight</span></span><br><span class="line">            hw[i] = <span class="built_in">min</span>(maxRight - i, hw[(mid&lt;&lt;<span class="number">1</span>) - i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//否则,就重新往外扩</span></span><br><span class="line">            hw[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果当前不是最长, 就往外扩</span></span><br><span class="line">        <span class="keyword">while</span>(nowString[i + hw[i]] == nowString[i - hw[i]])&#123;</span><br><span class="line">            ++hw[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新最右边的位置, 同时更新最长字串的半径</span></span><br><span class="line">        <span class="keyword">if</span>(i + hw[i] &gt; maxRight)&#123;</span><br><span class="line">            maxRight = i + hw[i];</span><br><span class="line">            mid = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(hw[i] &gt; maxLen)&#123;</span><br><span class="line">            maxLen = hw[i];</span><br><span class="line">            maxPoint = i;   <span class="comment">//最长回文串的中心位置</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//截取最长回文串</span></span><br><span class="line">    <span class="comment">//这里为啥这样写,在本博客前文已经提到过: 1. 第一步,重组字符串</span></span><br><span class="line">    <span class="keyword">return</span> s.substr((maxPoint - maxLen) / <span class="number">2</span>, maxLen - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="后续再补上一些例题-以及求字符串中所有的回文串个数-最长的回文串"><a href="#后续再补上一些例题-以及求字符串中所有的回文串个数-最长的回文串" class="headerlink" title="后续再补上一些例题,以及求字符串中所有的回文串个数,最长的回文串!"></a>后续再补上一些例题,以及求字符串中所有的回文串个数,最长的回文串!</h3></li>
</ul>
<p>2019.07.26, 已经将基本的马拉车算法应用补上.</p>
<h3 id="待补题-杭电6599"><a href="#待补题-杭电6599" class="headerlink" title="待补题: 杭电6599"></a>待补题: 杭电6599</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6599" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6599</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>马拉车</tag>
      </tags>
  </entry>
  <entry>
    <title>中缀转后缀表达式并计算</title>
    <url>/2019/07/10/%E4%B8%AD%E7%BC%80%E8%BD%AC%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%B9%B6%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<h3 id="中缀转后缀表达式并计算的知识点"><a href="#中缀转后缀表达式并计算的知识点" class="headerlink" title="中缀转后缀表达式并计算的知识点"></a>中缀转后缀表达式并计算的知识点</h3><p>可以参考: <a href="https://blog.csdn.net/coder_dacyuan/article/details/79941743" target="_blank" rel="noopener">点我访问</a><br>题目链接: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1237" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1237</a><br>此题我的代码必须用C++交才能过,估计涉及到精度问题！</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; signStack;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="built_in">string</span>&gt; lastQueue;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> ansString;</span><br><span class="line">    <span class="keyword">double</span> ansNum;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 计算运算结果</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getCalAns</span><span class="params">(<span class="built_in">string</span> signString, <span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> nowNum;</span><br><span class="line">    <span class="keyword">if</span>(signString == <span class="string">"+"</span>)&#123;</span><br><span class="line">        nowNum = a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(signString == <span class="string">"-"</span>)&#123;</span><br><span class="line">        nowNum = a - b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(signString == <span class="string">"*"</span>)&#123;</span><br><span class="line">        nowNum = a * b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(signString == <span class="string">"/"</span>)&#123;</span><br><span class="line">        nowNum = a / b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nowNum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//得到加减乘除的优先级</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSignLevel</span><span class="params">(<span class="built_in">string</span> signString)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(signString == <span class="string">"+"</span> || signString == <span class="string">"-"</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(signString == <span class="string">"*"</span> || signString == <span class="string">"/"</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比较两个符号的等级用stack弹出符号</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpSign</span><span class="params">(<span class="built_in">string</span> pushString, <span class="built_in">string</span> stackSign)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(getSignLevel(pushString) &gt; getSignLevel(stackSign))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stack_push</span><span class="params">(<span class="built_in">string</span> pushString)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pushString == <span class="string">"+"</span> || pushString == <span class="string">"-"</span> || pushString == <span class="string">"*"</span> || pushString == <span class="string">"/"</span>)&#123;</span><br><span class="line">        <span class="comment">//当signStack不为空时</span></span><br><span class="line">        <span class="keyword">while</span>(signStack.<span class="built_in">size</span>() &amp;&amp; !cmpSign(pushString, signStack.top()))&#123;</span><br><span class="line">            lastQueue.push(signStack.top());</span><br><span class="line">            signStack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后把当前符号放入</span></span><br><span class="line">        signStack.push(pushString);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pushString == <span class="string">"("</span>)&#123;</span><br><span class="line">        signStack.push(pushString);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pushString == <span class="string">")"</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(signStack.top() != <span class="string">"("</span>)&#123;</span><br><span class="line">            lastQueue.push(signStack.top());</span><br><span class="line">            signStack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//弹出(</span></span><br><span class="line">        signStack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 中缀转后缀并计算结果</span></span><br><span class="line"><span class="function">node <span class="title">getMediumTOPost</span><span class="params">(<span class="built_in">string</span> mediumStrng)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = mediumStrng.length();</span><br><span class="line">    <span class="built_in">string</span> numString = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="comment">//为空字符</span></span><br><span class="line">        <span class="keyword">if</span>(mediumStrng[i] == <span class="string">'*'</span> || mediumStrng[i] == <span class="string">'/'</span> || mediumStrng[i] == <span class="string">'+'</span> || mediumStrng[i] == <span class="string">'-'</span>)&#123;</span><br><span class="line">            <span class="comment">//把数字压入</span></span><br><span class="line">            <span class="keyword">if</span>(numString.<span class="built_in">size</span>())&#123;</span><br><span class="line">                lastQueue.push(numString);</span><br><span class="line">                numString = <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            stack_push(mediumStrng.substr(i, <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mediumStrng[i] == <span class="string">'('</span> || mediumStrng[i] == <span class="string">')'</span>)&#123;</span><br><span class="line">            <span class="comment">//把数字压入</span></span><br><span class="line">            <span class="keyword">if</span>(numString.<span class="built_in">size</span>())&#123;</span><br><span class="line">                lastQueue.push(numString);</span><br><span class="line">                numString = <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            stack_push(mediumStrng.substr(i, <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mediumStrng[i] != <span class="string">' '</span>)&#123;</span><br><span class="line">            numString += mediumStrng[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i == len - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//把数字压入</span></span><br><span class="line">            <span class="keyword">if</span>(numString.<span class="built_in">size</span>())&#123;</span><br><span class="line">                lastQueue.push(numString);</span><br><span class="line">                numString = <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> ansString = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">while</span>(signStack.<span class="built_in">size</span>())&#123;</span><br><span class="line">        lastQueue.push(signStack.top());</span><br><span class="line">        signStack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="built_in">string</span>&gt; getNumQueue = lastQueue;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">double</span>&gt; tmpStack;</span><br><span class="line">    <span class="comment">//double lastNum = 0;</span></span><br><span class="line">    <span class="keyword">while</span>(lastQueue.<span class="built_in">size</span>())&#123;</span><br><span class="line">        ansString += (lastQueue.front() + <span class="string">" "</span>);</span><br><span class="line">        lastQueue.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将字符串转换为double</span></span><br><span class="line">    <span class="keyword">while</span>(getNumQueue.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="built_in">string</span> stmp = getNumQueue.front();</span><br><span class="line">        <span class="keyword">if</span>(stmp == <span class="string">"+"</span> || stmp == <span class="string">"-"</span> || stmp == <span class="string">"*"</span> || stmp == <span class="string">"/"</span>)&#123;</span><br><span class="line">            <span class="keyword">double</span> a, b;</span><br><span class="line">            b = tmpStack.top();</span><br><span class="line">            tmpStack.pop();</span><br><span class="line">            a = tmpStack.top();</span><br><span class="line">            tmpStack.pop();</span><br><span class="line">            a = getCalAns(stmp, a, b);</span><br><span class="line">            tmpStack.push(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            tmpStack.push(atof(stmp.c_str()));</span><br><span class="line">        &#125;</span><br><span class="line">        getNumQueue.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//node ansNode;</span></span><br><span class="line">    <span class="comment">//ansNode.ansNum = tmpStack.top();</span></span><br><span class="line">    <span class="comment">//ansNode.ansString = ansString.substr(0, ansString.length() - 1);</span></span><br><span class="line">    <span class="keyword">return</span> node&#123;ansString.substr(<span class="number">0</span>, ansString.length() - <span class="number">1</span>), tmpStack.top()&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">string</span> cins;</span><br><span class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span>, cins) &amp;&amp; cins != <span class="string">"0"</span>)&#123;</span><br><span class="line">        <span class="comment">//栈清空</span></span><br><span class="line">        <span class="keyword">while</span>(signStack.<span class="built_in">size</span>()) signStack.pop();</span><br><span class="line">        <span class="keyword">while</span>(lastQueue.<span class="built_in">size</span>()) lastQueue.pop();</span><br><span class="line">        node ansNode = getMediumTOPost(cins);</span><br><span class="line">        <span class="comment">//cout &lt;&lt; ansNode.ansString &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">2</span>) &lt;&lt; (ansNode.ansNum) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>中缀转后缀</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntn16.04之Nginx多站点的配置</title>
    <url>/2019/06/26/ubuntn16-04%E4%B9%8BNginx%E5%A4%9A%E7%AB%99%E7%82%B9%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="nginx-多站点配置"><a href="#nginx-多站点配置" class="headerlink" title="nginx 多站点配置"></a>nginx 多站点配置</h3><p>参考了博客: <a href="https://www.linuxidc.com/Linux/2017-11/148532.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2017-11/148532.htm</a></p>
<ul>
<li>首先你要创建一个新的Nginx配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;进入目录</span><br><span class="line">cd  &#x2F;etc&#x2F;nginx&#x2F;sites-enabled</span><br><span class="line">&#x2F;&#x2F;拷贝配置文件</span><br><span class="line">cp default site1</span><br><span class="line">&#x2F;&#x2F;修改配置文件</span><br><span class="line">vim site1</span><br></pre></td></tr></table></figure>
修改配置文件, 修改端口信息<br><img src="https://img-blog.csdnimg.cn/2019062618114122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>修改网站根目录</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190626181257512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>保存退出即可!</p>
<ol start="2">
<li>然后我们在网站目录下创建一个index.php<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;进入根目录</span><br><span class="line">cd &#x2F;var&#x2F;www</span><br><span class="line">&#x2F;&#x2F;创建网站文件夹</span><br><span class="line">mkdir site1</span><br><span class="line">&#x2F;&#x2F;进入目录</span><br><span class="line">cd site1</span><br><span class="line">&#x2F;&#x2F;创建index.php</span><br><span class="line">vim index.php</span><br><span class="line">&#x2F;&#x2F;在文件中写入</span><br><span class="line">&lt;?php</span><br><span class="line">   echo phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line">&#x2F;&#x2F;保存退出，重启一下nginx</span><br><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure></li>
<li>然后我们访问我们的域名，或者IP、 通过ip 或者域名进行访问，后面要加上 :端口号！ 访问不了的要去服务商那开放端口才行哦！<br><img src="https://img-blog.csdnimg.cn/20190626181446878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果显示如下图，代表多站点就配置成功了！<br><img src="https://img-blog.csdnimg.cn/2019062618215251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Nginx</tag>
        <tag>多站点</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu16.04配置lnmp环境</title>
    <url>/2019/06/26/ubuntu16-04%E9%85%8D%E7%BD%AElnmp%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="域名备案终于好了-emmmmmm-可以搭建博客了！"><a href="#域名备案终于好了-emmmmmm-可以搭建博客了！" class="headerlink" title="域名备案终于好了,emmmmmm,可以搭建博客了！"></a>域名备案终于好了,emmmmmm,可以搭建博客了！</h2><p>参考了一些博客:<br>  1.<a href="https://www.cnblogs.com/zhangbobo/p/9597446.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhangbobo/p/9597446.html</a><br>  2.<a href="https://segmentfault.com/a/1190000016777859?utm_source=tag-newest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016777859?utm_source=tag-newest</a><br>  3.<a href="https://www.cnblogs.com/mracale/p/9632714.html" target="_blank" rel="noopener">https://www.cnblogs.com/mracale/p/9632714.html</a><br>  感谢这些博主的博文！</p>
<h2 id="nginx-多站点配置"><a href="#nginx-多站点配置" class="headerlink" title="nginx 多站点配置"></a>nginx 多站点配置</h2><p>请移步到: <a href="https://blog.csdn.net/HKer_YM/article/details/93762220" target="_blank" rel="noopener">https://blog.csdn.net/HKer_YM/article/details/93762220</a></p>
<ul>
<li>首先，你得需要一天服务器，刚好阿里云轻量型服务器(学生价格emmmmmm),安装ubuntu系统！域名啥的都解析好了！ok，进入安装环境！</li>
<li>安装环境: 我用的是xshell6进行连接<br><img src="https://img-blog.csdnimg.cn/20190626174631600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><ol>
<li>首先我们得更新一下ubuntu软件源:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li>
<li>然后我们安装MySQL, 执行后会让我们输入两次数据库的密码！<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install mysql-server mysql-client</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<ol start="3">
<li>然后我们再安装nginx<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br><span class="line">&#x2F;&#x2F;然后访问服务器ip, 或者域名,出现如下的欢迎界面,那么就代表你的nginx安装成功了！</span><br></pre></td></tr></table></figure>
<img src="https://img-blog.csdnimg.cn/20190626173230971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><ol start="4">
<li>然后我们安装PHP7.0<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-add-repository ppa:ondrej&#x2F;php  &#x2F;&#x2F;使用 PPA ppa:ondrej&#x2F;php</span><br><span class="line">sudo apt update  &#x2F;&#x2F;更新软件库</span><br><span class="line">sudo apt install php7.0 php7.0-fpm php7.0-cgi php7.0-common php7.0-curl php7.0-mysql php7.0-mcrypt php7.0-mbstring</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<ol start="5">
<li><p>配置nginx, 以及PHPFastCGI配置, 推荐直接只用默认配置即可!</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;编辑配置文件</span><br><span class="line">sudo vim &#x2F;etc&#x2F;php&#x2F;7.0&#x2F;fpm&#x2F;pool.d&#x2F;www.conf</span><br><span class="line">	#默认是socket方式</span><br><span class="line">	listen &#x3D; &#x2F;run&#x2F;php&#x2F;php7.0-fpm.sock</span><br><span class="line">	#TCP方式  </span><br><span class="line">	listen &#x3D; 127.0.0.1:9000</span><br><span class="line">&#x2F;&#x2F;然后检查下配置</span><br><span class="line">sudo php-fpm7.0 -t</span><br><span class="line">&#x2F;&#x2F;然后重启一下服务</span><br><span class="line">sudo service php-fpm7.0 restart</span><br><span class="line">&#x2F;&#x2F;然后我们再修改nginx的配置，修改网站目录为var&#x2F;www, 然后加入主页 index.php</span><br><span class="line">sudo vim &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;default</span><br><span class="line">&#x2F;&#x2F;修改好后检查一下配置！</span><br><span class="line">sudo nginx -t</span><br><span class="line">&#x2F;&#x2F;然后重启</span><br><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20190626174210779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>文件无错误！<br><img src="https://img-blog.csdnimg.cn/20190626174801534.png" alt="在这里插入图片描述"><br>重启成功<br><img src="https://img-blog.csdnimg.cn/20190626174945250.png" alt="在这里插入图片描述"><br>修改网站根目录, 并添加主页index.php<br><img src="https://img-blog.csdnimg.cn/20190626175238689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>并取消这几行代码的注释<br><img src="https://img-blog.csdnimg.cn/20190626175351735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后保存，退出！</p>
</li>
<li><p>所有配置完成后, 在var/www 目录下创建一个index.php, 来检测是否搭建成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;在index.php里加入如下代码</span><br><span class="line">&lt;?php</span><br><span class="line">   echo phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>然后访问我们的服务器ip, 或者域名！<br><img src="https://img-blog.csdnimg.cn/20190626175905806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>出现如下页面，代表你已经搭建成功！！</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu</category>
        <category>lnmp</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>lnmp</tag>
      </tags>
  </entry>
  <entry>
    <title>Java登陆注册之验证码的发送</title>
    <url>/2019/06/17/Java%E7%99%BB%E9%99%86%E6%B3%A8%E5%86%8C%E4%B9%8B%E9%AA%8C%E8%AF%81%E7%A0%81%E7%9A%84%E5%8F%91%E9%80%81/</url>
    <content><![CDATA[<ul>
<li>最近没事学了点前后端的东西!(不是不打题QAQ….)<br>上个周末搞了搞了注册登陆，emmmmm，前端页面也自己写了写！虽说有点不好看，凑合用用吧！</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/2019061714511554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190617145159935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以搞了个邮件验证码！参考了一些博客:<br>    1.    <a href="https://blog.csdn.net/j18423532754/article/details/80324700" target="_blank" rel="noopener">https://blog.csdn.net/j18423532754/article/details/80324700</a><br>    2.    <a href="https://www.cnblogs.com/xyzq/p/5704358.html" target="_blank" rel="noopener">https://www.cnblogs.com/xyzq/p/5704358.html</a></p>
<ul>
<li>还行搞了一个中午总算成功了！！上面两篇博客都讲的蛮详细的！对了还需要3个jar包，一定得附加上去！<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*邮件验证码*/</span></span><br><span class="line"><span class="comment">/*对此部分进行封装一下比较好，主要现在自己先练练手，*/</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sendemailcode"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendemailcode</span><span class="params">(HttpServletRequest req, String userEmail)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            HtmlEmail email = <span class="keyword">new</span> HtmlEmail();</span><br><span class="line">            email.setHostName(<span class="string">"smtp.qq.com"</span>);</span><br><span class="line">            email.setCharset(<span class="string">"utf-8"</span>);</span><br><span class="line">            email.addTo(userEmail);</span><br><span class="line">            email.setFrom(<span class="string">"252014906@qq.com"</span>);</span><br><span class="line">            email.setAuthentication(<span class="string">"252014906@qq.com"</span>, <span class="string">"wfarmklyqroycbad"</span>);</span><br><span class="line">            email.setSubject(<span class="string">"验证码"</span>);</span><br><span class="line">            String randCode = getRandNum();</span><br><span class="line">            email.setMsg(<span class="string">"&lt;h1&gt;您的验证码为: "</span> + randCode +<span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line">            email.send();</span><br><span class="line">            <span class="comment">//  写入session</span></span><br><span class="line">            req.getSession().setAttribute(userEmail, randCode);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            req.getSession().setAttribute(userEmail, <span class="string">"邮件发送失败"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"false"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRandNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String randCode = String.valueOf((<span class="keyword">int</span>)(Math.random() * <span class="number">9999</span>));</span><br><span class="line">        <span class="keyword">while</span>(randCode.length() &lt; <span class="number">4</span>) randCode = <span class="string">"0"</span> + randCode;</span><br><span class="line">        <span class="keyword">return</span> randCode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>最后引用一下营长的话！<br><img src="https://img-blog.csdnimg.cn/20190617150027296.png" alt="在这里插入图片描述"><h3 id="最后推荐一个博客-https-hanweizhe-learn-code-cn"><a href="#最后推荐一个博客-https-hanweizhe-learn-code-cn" class="headerlink" title="最后推荐一个博客: https://hanweizhe.learn-code.cn"></a>最后推荐一个博客: <a href="https://hanweizhe.learn-code.cn" target="_blank" rel="noopener">https://hanweizhe.learn-code.cn</a></h3></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java注册登录</tag>
      </tags>
  </entry>
  <entry>
    <title>坦克大战之继承的实现</title>
    <url>/2019/06/06/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E4%B9%8B%E7%BB%A7%E6%89%BF%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="来签个到，留个痕迹"><a href="#来签个到，留个痕迹" class="headerlink" title="来签个到，留个痕迹"></a>来签个到，留个痕迹</h2><ul>
<li><p>Main.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">        System.out.println(</span><br><span class="line">                &quot;*******************坦克大战之继承的实现*******************&quot;</span><br><span class="line">        );</span><br><span class="line">        System.out.print(</span><br><span class="line">                &quot;请输入坦克的名字：&quot;</span><br><span class="line">        );</span><br><span class="line">        String tankName &#x3D; sc.nextLine();</span><br><span class="line">        while(tankName.length() &#x3D;&#x3D; 0)&#123;</span><br><span class="line">            System.out.print(</span><br><span class="line">                    &quot;您的输入有误!请输入坦克的名字：&quot;</span><br><span class="line">            );</span><br><span class="line">            tankName &#x3D; sc.nextLine();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(</span><br><span class="line">                &quot;请输入坦克的攻击力(INT以内的整数)：&quot;</span><br><span class="line">        );</span><br><span class="line">        String tankPower &#x3D; sc.nextLine();</span><br><span class="line">        while(tankPower.matches(&quot;^\\d+$&quot;) &#x3D;&#x3D; false || !(tankPower.length() &gt;&#x3D; 1 &amp;&amp; tankPower.length() &lt;&#x3D; 9))&#123;</span><br><span class="line">            System.out.print(</span><br><span class="line">                    &quot;您的输入有误!请重新输入坦克的攻击力(INT以内的整数)：&quot;</span><br><span class="line">            );</span><br><span class="line">            tankPower &#x3D; sc.nextLine();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(</span><br><span class="line">                &quot;请输入坦克的速度(INT以内的整数)：&quot;</span><br><span class="line">        );</span><br><span class="line">        String tankSpeed &#x3D; sc.nextLine();</span><br><span class="line">        while(tankPower.matches(&quot;^\\d+$&quot;) &#x3D;&#x3D; false || !(tankSpeed.length() &gt;&#x3D; 1 &amp;&amp; tankSpeed.length() &lt;&#x3D; 9))&#123;</span><br><span class="line">            System.out.print(</span><br><span class="line">                    &quot;您的输入有误!请重新输入坦克的速度(INT以内的整数)：&quot;</span><br><span class="line">            );</span><br><span class="line">            tankSpeed &#x3D; sc.nextLine();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(</span><br><span class="line">                &quot;请输入坦克的能量(INT以内的整数)：&quot;</span><br><span class="line">        );</span><br><span class="line">        String tankEnergy &#x3D; sc.nextLine();</span><br><span class="line">        while(tankPower.matches(&quot;^\\d+$&quot;) &#x3D;&#x3D; false || !(tankEnergy.length() &gt;&#x3D; 1 &amp;&amp; tankEnergy.length() &lt;&#x3D; 9))&#123;</span><br><span class="line">            System.out.print(</span><br><span class="line">                    &quot;您的输入有误!请重新输入坦克的能量(INT以内的整数)：&quot;</span><br><span class="line">            );</span><br><span class="line">            tankEnergy &#x3D; sc.nextLine();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(</span><br><span class="line">                &quot;请输入坦克的方向(1. 上 2. 下 3. 左 4. 右)：&quot;</span><br><span class="line">        );</span><br><span class="line">        String tankDir &#x3D; sc.nextLine();</span><br><span class="line">        while(tankPower.matches(&quot;^^\\d+$&quot;) &#x3D;&#x3D; false || tankDir.length() !&#x3D; 1)&#123;</span><br><span class="line">            System.out.print(</span><br><span class="line">                    &quot;您的输入有误!请重新输入坦克的方向(1. 上 2. 下 3. 左 4. 右)：&quot;</span><br><span class="line">            );</span><br><span class="line">            tankDir &#x3D; sc.nextLine();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;*创建坦克类实例对象*&#x2F;</span><br><span class="line">        Tank tank &#x3D; new Tank(</span><br><span class="line">                Integer.valueOf(tankPower),</span><br><span class="line">                Integer.valueOf(tankSpeed),</span><br><span class="line">                Integer.valueOf(tankEnergy),</span><br><span class="line">                tankName,</span><br><span class="line">                Integer.valueOf(tankDir)</span><br><span class="line">        );</span><br><span class="line">        String tmp &#x3D; &quot;&quot;;</span><br><span class="line">        System.out.println(</span><br><span class="line">                &quot;*******************输入任意字符可使坦克进行移动(输入\&quot;quit\&quot;即可停止运动!)*******************&quot;</span><br><span class="line">        );</span><br><span class="line">        while(sc.hasNext())&#123;</span><br><span class="line">            tmp &#x3D; sc.next();</span><br><span class="line">            System.out.println(</span><br><span class="line">                    &quot;*******************坦克正在移动中*******************&quot;</span><br><span class="line">            );</span><br><span class="line">            if(tmp.compareTo(&quot;quit&quot;) &#x3D;&#x3D; 0) break;</span><br><span class="line">            if(tank.attack() &#x3D;&#x3D; -1) break;          &#x2F;&#x2F;坦克能量耗尽！</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Weapen.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 武器类</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Weapen &#123;</span><br><span class="line"></span><br><span class="line">    private String weapenString;</span><br><span class="line">    private int power;</span><br><span class="line">    private int speed;</span><br><span class="line">    private int energy;</span><br><span class="line"></span><br><span class="line">    Weapen(int power, int speed, int energy, String weapenString)</span><br><span class="line">    &#123;</span><br><span class="line">        setPower(power);</span><br><span class="line">        setSpeed(speed);</span><br><span class="line">        setEnergy(energy);</span><br><span class="line">        setWeapenString(weapenString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getPower() &#123;</span><br><span class="line">        return power;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPower(int power) &#123;</span><br><span class="line">        this.power &#x3D; power;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getSpeed() &#123;</span><br><span class="line">        return speed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSpeed(int speed) &#123;</span><br><span class="line">        this.speed &#x3D; speed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getEnergy() &#123;</span><br><span class="line">        return energy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEnergy(int energy) &#123;</span><br><span class="line">        this.energy &#x3D; energy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getWeapenString() &#123;</span><br><span class="line">        return weapenString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setWeapenString(String weapenString) &#123;</span><br><span class="line">        this.weapenString &#x3D; weapenString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Tank.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">&#x2F;**</span><br><span class="line"> * 坦克类</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">public class Tank extends Weapen&#123;</span><br><span class="line"></span><br><span class="line">    private int dir; &#x2F;*坦克的方向: 1. 上 2. 下 3. 左 4. 右*&#x2F;</span><br><span class="line">    private String dirString[] &#x3D; &#123;&quot;上&quot;, &quot;下&quot;, &quot;左&quot;, &quot;右&quot;&#125;;</span><br><span class="line">    private int reduceEnergy;   &#x2F;&#x2F;消耗的能量</span><br><span class="line"></span><br><span class="line">    Tank(int power, int speed, int energy, String weapenString, int dir)</span><br><span class="line">    &#123;</span><br><span class="line">        super(power, speed, energy, weapenString);</span><br><span class="line">        setDir(dir);</span><br><span class="line">        setReduceEnergy(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getDir() &#123;</span><br><span class="line">        return dir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDir(int dir) &#123;</span><br><span class="line">        this.dir &#x3D; dir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getReduceEnergy() &#123;</span><br><span class="line">        return reduceEnergy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setReduceEnergy(int reduceEnergy) &#123;</span><br><span class="line">        this.reduceEnergy &#x3D; reduceEnergy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getReduceEnergyPercent()&#123;</span><br><span class="line"></span><br><span class="line">        int nowHasReduceEnergy &#x3D; getReduceEnergy();</span><br><span class="line">        int startEnergy &#x3D; getEnergy();</span><br><span class="line">        double percent &#x3D; (nowHasReduceEnergy * 1.0) &#x2F; (startEnergy * 1.0);</span><br><span class="line"></span><br><span class="line">        return (percent &gt;&#x3D; 1.0 ? 1.0 : percent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int toCheckEnergy()&#123;</span><br><span class="line">        int nowHasReduceEnergy &#x3D; getReduceEnergy();</span><br><span class="line">        int startEnergy &#x3D; getEnergy();</span><br><span class="line">        double percent &#x3D; getReduceEnergyPercent();</span><br><span class="line"></span><br><span class="line">        if(percent &gt;&#x3D; 0.7)&#123;</span><br><span class="line">            System.out.println(&quot;报告! 您已消耗超过70%的能量, 不得不为您降速度!以确保您的安全!&quot;);</span><br><span class="line">            return (int)(getSpeed() * percent);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(percent &gt;&#x3D; 0.5)&#123;</span><br><span class="line">            System.out.println(&quot;报告! 您已消耗超过50%的能量, 不得不为您降速度!以确保您的安全!&quot;);</span><br><span class="line">            return (int)(getSpeed() * percent);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(percent &gt;&#x3D; 0.3)&#123;</span><br><span class="line">            System.out.println(&quot;报告! 您已消耗超过30%的能量, 不得不为您降速度!以确保您的安全!&quot;);</span><br><span class="line">            return (int)(getSpeed() * percent);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;return (int)(getSpeed() * percent);</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int attack()&#123;</span><br><span class="line">        setReduceEnergy(getReduceEnergy() + 1);     &#x2F;&#x2F;能量消耗 + 1</span><br><span class="line">        if(getReduceEnergyPercent() &gt;&#x3D; 1.0)&#123;</span><br><span class="line">            System.out.println(</span><br><span class="line">                    &quot;抱歉坦克能量已经耗尽,已无法运动!&quot;</span><br><span class="line">            );</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(</span><br><span class="line">                &quot;我是坦克: &quot; + getWeapenString() + &quot;, 正在向 &quot; + dirString[getDir() - 1] + &quot; 运动, 速度: &quot; + (getSpeed() - toCheckEnergy()) + &quot;, 攻击力: &quot; + getPower()</span><br><span class="line">        );</span><br><span class="line">        &#x2F;*System.out.println(</span><br><span class="line">                &quot;当前已经消耗能量：&quot; + (getReduceEnergyPercent() * 100) + &quot;%&quot;</span><br><span class="line">        );*&#x2F;</span><br><span class="line">        System.out.printf(&quot;当前已经消耗能量：%.2f%%&quot;, (getReduceEnergyPercent() * 100));</span><br><span class="line">        System.out.println();</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>坦克大战</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM测试数据的生成</title>
    <url>/2019/06/02/ACM%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE%E7%9A%84%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<h2 id="最近刚好在出题所以就研究了一下，C语言函数rand-并不能满足我们的需求！！！"><a href="#最近刚好在出题所以就研究了一下，C语言函数rand-并不能满足我们的需求！！！" class="headerlink" title="最近刚好在出题所以就研究了一下，C语言函数rand() 并不能满足我们的需求！！！"></a>最近刚好在出题所以就研究了一下，C语言函数rand() 并不能满足我们的需求！！！</h2><ul>
<li><p>参考了一些博客，我觉得还是这篇博文写的比较好！！(<a href="https://blog.csdn.net/u013615904/article/details/42321313" target="_blank" rel="noopener">点击我访问！</a>)</p>
</li>
<li><p>看来这篇博文后我对作者的代码加以修改了一下！！各位大佬，有问题可以在下方留言！感谢！</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> LLMax=<span class="string">"9223372036854775807"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> IntMax=<span class="string">"2147483647"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> intDigit = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> llDigit = <span class="number">19</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">randIntNum</span><span class="params">(<span class="keyword">int</span> digit, <span class="keyword">bool</span> isHasZero, <span class="keyword">bool</span> isGetNegative)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> n = rand() % digit + <span class="number">1</span>; 	<span class="comment">//需要生成的位数 </span></span><br><span class="line">   <span class="built_in">string</span> randNumString = <span class="string">""</span>;</span><br><span class="line">   <span class="keyword">if</span>(n == intDigit)&#123;</span><br><span class="line">   	randNumString += (rand() % <span class="number">2</span> + <span class="number">1</span> + <span class="string">'0'</span>);</span><br><span class="line">	   	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">	   		<span class="keyword">int</span> tmp = rand() % <span class="number">10</span>;</span><br><span class="line">	   		<span class="keyword">while</span>(tmp &gt; (IntMax[i] - <span class="string">'0'</span>)) tmp = rand() % <span class="number">10</span>;</span><br><span class="line">	   		randNumString += (tmp + <span class="string">'0'</span>);</span><br><span class="line">	   	&#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">	   	<span class="keyword">if</span>(isHasZero) randNumString += (rand() % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">	   	<span class="keyword">else</span> randNumString += (rand() % <span class="number">9</span> + <span class="number">1</span> + <span class="string">'0'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">   	randNumString += (rand() % <span class="number">9</span> + <span class="number">1</span> + <span class="string">'0'</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> tmp = rand() % <span class="number">10</span>;</span><br><span class="line">			randNumString += (tmp + <span class="string">'0'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span>(isGetNegative)&#123;</span><br><span class="line">		<span class="keyword">if</span>(rand() % <span class="number">2</span> &amp;&amp; randNumString[<span class="number">0</span>] != <span class="string">'0'</span>)&#123;</span><br><span class="line">			randNumString = <span class="string">"-"</span> + randNumString;</span><br><span class="line">		&#125;	</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> randNumString;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">randLLNum</span><span class="params">(<span class="keyword">int</span> digit, <span class="keyword">bool</span> isHasZero, <span class="keyword">bool</span> isGetNegative)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> n = rand() % digit + <span class="number">1</span>; 	<span class="comment">//需要生成的位数 </span></span><br><span class="line">   <span class="built_in">string</span> randNumString = <span class="string">""</span>;</span><br><span class="line">   <span class="keyword">if</span>(n == llDigit)&#123;</span><br><span class="line">		randNumString += (rand() % <span class="number">2</span> + <span class="number">1</span> + <span class="string">'0'</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> tmp = rand() % <span class="number">10</span>;</span><br><span class="line">			<span class="keyword">while</span>(tmp &gt; (LLMax[i] - <span class="string">'0'</span>)) tmp = rand() % <span class="number">10</span>;</span><br><span class="line">			randNumString += (tmp + <span class="string">'0'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(isHasZero) randNumString += (rand() % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">		<span class="keyword">else</span> randNumString += (rand() % <span class="number">9</span> + <span class="number">1</span> + <span class="string">'0'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">		randNumString += (rand() % <span class="number">9</span> + <span class="number">1</span> + <span class="string">'0'</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> tmp = rand() % <span class="number">10</span>;</span><br><span class="line">			randNumString += (tmp + <span class="string">'0'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span>(isGetNegative)&#123;</span><br><span class="line">		<span class="keyword">if</span>(rand() % <span class="number">2</span> &amp;&amp; randNumString[<span class="number">0</span>] != <span class="string">'0'</span>)&#123;</span><br><span class="line">			randNumString = <span class="string">"-"</span> + randNumString;</span><br><span class="line">		&#125;	</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> randNumString;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">   freopen(<span class="string">"rand.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">   srand(time(<span class="number">0</span>));</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="当然有了数据生成器，这需要批量生成数据以及对数据进行存储操作，希望下面的批处理脚本对你有用！-如果大佬有跟好的方案，可以下留言处分享！感谢了！"><a href="#当然有了数据生成器，这需要批量生成数据以及对数据进行存储操作，希望下面的批处理脚本对你有用！-如果大佬有跟好的方案，可以下留言处分享！感谢了！" class="headerlink" title="当然有了数据生成器，这需要批量生成数据以及对数据进行存储操作，希望下面的批处理脚本对你有用！(如果大佬有跟好的方案，可以下留言处分享！感谢了！)"></a>当然有了数据生成器，这需要批量生成数据以及对数据进行存储操作，希望下面的批处理脚本对你有用！(如果大佬有跟好的方案，可以下留言处分享！感谢了！)</h2></li>
<li><p>提示 ： rem 为注释</p>
</li>
<li><p>如果复制出现代码都在一行的情况，请将代码在到ide中，然后再复制即可！！！</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set &#x2F;a index&#x3D;0</span><br><span class="line">:loop</span><br><span class="line">	rem 数据生成器可执行文件名</span><br><span class="line">	get_rand.exe</span><br><span class="line">	rem 标程可执行文件名</span><br><span class="line">	demo.exe													</span><br><span class="line">	ping 0.0.0.0  -n 2 &gt; null</span><br><span class="line">	set &#x2F;a index&#x3D;%index%+1</span><br><span class="line">	echo -----------------------------目前正在处理第%index%个文件---------------------------------</span><br><span class="line">	rem 设置数据文件名</span><br><span class="line">	set name&#x3D;data%index%.in							</span><br><span class="line">	ren rand.txt %name%</span><br><span class="line">	rem 此处为数据存放路径</span><br><span class="line">	move %name% D:\data					</span><br><span class="line">	rem 设置数据文件名			</span><br><span class="line">	set name&#x3D;data%index%.out						</span><br><span class="line">	rem 进行移动</span><br><span class="line">	ren demo.txt %name%								</span><br><span class="line">	rem 此处为数据存放路径</span><br><span class="line">	move %name% D:\data								</span><br><span class="line">	::pause</span><br><span class="line">	rem 测试数据生成的组数</span><br><span class="line">	if %index%&#x3D;&#x3D;100 goto end</span><br><span class="line">	goto loop</span><br><span class="line">:end</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot的搭建与使用</title>
    <url>/2019/05/06/Spring-Boot%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Spring-Boot的搭建"><a href="#Spring-Boot的搭建" class="headerlink" title="Spring Boot的搭建"></a>Spring Boot的搭建</h2><p><strong>偷个懒就用图片来解释所有的搭建过程！！QAQ…..</strong><br><img src="https://img-blog.csdnimg.cn/20190506174625604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190506174642478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190506174651855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190506174700118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190506174707295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190506174714882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190506174721964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190506174729964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190506174736250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190506174741701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="俗话说的好：熟能生巧"><a href="#俗话说的好：熟能生巧" class="headerlink" title="俗话说的好：熟能生巧"></a>俗话说的好：熟能生巧</h2><p><strong>多多尝试你总能学会的！！！</strong></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的安装与相关问题的处理</title>
    <url>/2019/05/06/MySQL%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E7%9A%84%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><ol>
<li>推荐使用MySQL5.7版本,安装教程推荐营长给的:<br><a href="https://blog.csdn.net/qq_23994787/article/details/80648731" target="_blank" rel="noopener">点我进行访问</a></li>
</ol>
<h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><ol>
<li><p>没安装过mysql的电脑如果遇到错误提示，一般都是my.ini出现了问题！！！</p>
</li>
<li><p>my.ini 中一定要修改原来的路径，改为自己对应的路径！<br><img src="https://img-blog.csdnimg.cn/20190506141837772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="修改路径"><br><img src="https://img-blog.csdnimg.cn/2019050614190844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="删除这两行文字"></p>
<ol start="3">
<li>对于我推荐的安装教程文章中my.ini复制没有换行的问题处理方式:复制粘贴到代码编译器中，修改后再复制粘贴到my.ini中即可！<img src="https://img-blog.csdnimg.cn/20190506141806263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="修改my.ini"></li>
<li>如果在执行mysqld –install 命令时出现错误:<strong>mysql Install/Remove of the Service Denied!</strong><br>请使用管理员权限运行cmd，然后继续执行后面的操作即可！！！<br><img src="https://img-blog.csdnimg.cn/20190506142158704.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="运行管理员权限"><br><img src="https://img-blog.csdnimg.cn/20190506142215329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hLZXJfWU0=,size_16,color_FFFFFF,t_70" alt="设置完成"><h2 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h2>一般出现的错误都是因为my.ini 文件配置错误！！</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
